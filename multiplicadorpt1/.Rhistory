library(tidyr)
library(kableExtra)
library(flextable)
library(openxlsx)
### Criando um vetor para ser a coluna de tempo
dates <- seq.Date(from = as.Date("2003-01-01"), to = as.Date("2023-12-01"), by = "month")
#criando vetores para cada valor do MP, DV, ResBan, PPMP e BASE MONETARIA
vetormp <- TabelaMP[[2]]
vetordepavi <- TabelaDepAvi[[2]]
vetorresban <- TabelaResBan[[2]]
vetorPPMP <- TabelaPMPP[[2]]
vetorBASE <- TabelaBASE[[2]]
#formatando os vetores
vetor_mp <- format(vetormp, big.mark = ".", decimal.mark = ",", scientific = FALSE)
vetor_depavi <- format(vetordepavi, big.mark = ".", decimal.mark = ",", scientific = FALSE)
vetor_resban <- format(vetorresban, big.mark = ".", decimal.mark = ",", scientific = FALSE)
vetor_PPMP <- format(vetorPPMP, big.mark = ".", decimal.mark = ",", scientific = FALSE)
vetor_BASE <- format(vetorBASE, big.mark = ".", decimal.mark = ",", scientific = FALSE)
#criação das séries temporais
###SABEMOS QUE B = PMPP + ENCAIXES TOTAIS / LOGO ENCAIXES TOTAIS = B - PMPP
#Função de subtração
Z <- function(s, t){
Resultado = s - t
return(Resultado)
}
#criando um vetor com os encaixes técnicos
VetorEncaixe <- mapply(Z, TabelaBASE[[2]], TabelaPMPP[[2]])
#Tabela do vetor de encaxe
TabelaEncaixe <- tibble(Data = dates, Valor = VetorEncaixe)
#Formatando o vetor_encaixe
Vetor_Encaixe <- format(VetorEncaixe, big.mark = ".", decimal.mark = ",", scientific = FALSE)
### juntando todas as variáveis em uma tabela só
TabelaBacen <- tibble(Data = dates, "Meios de Pagamentos" = vetor_mp,
"Depositos a vista" = vetor_depavi, "Encaixes Totais" = Vetor_Encaixe)
# Criando função para realizar o cálculo do coeficiente
X <- function(x,y){
Resultado = x/y
return(Resultado)
}
Coeficiente_e <- mapply(X, TabelaEncaixe[[2]], TabelaDepAvi[[2]])
Coeficiente_d <- mapply(X, TabelaDepAvi[,2], TabelaMP[,2])
SerieTemporal_e <- tibble(data = dates, valor = Coeficiente_e)
SerieTemporal_d <- tibble(data = dates, valor = Coeficiente_d)
y <- function(d,e){
Resultado = 1/(1-d * (1-e))
return(Resultado)
}
Coeficientes <- tibble(data = dates, Valor_de_e = Coeficiente_e, Valor_de_d = Coeficiente_d)
Multiplicador_mon <- mapply(y, Coeficientes[,3], Coeficientes[,2])
SerieTemporal_alpha <- tibble(data = dates, valor = Multiplicador_mon)
TabelaBacen <- TabelaBacen %>%
add_column(e = Coeficiente_e, d = Coeficiente_d, alpha = Multiplicador_mon, .after = "Encaixes Totais", .name_repair = "unique")
kable(TabelaBacen, format = "latex", longtable = TRUE, booktabs = TRUE, caption = "Valores das Variáveis no Tempo") %>%
kable_styling(latex_options = c("striped", "scale_down"), full_width = FALSE, font_size = 10)
media_multi <- mean(Multiplicador_mon)
mean(SerieTemporal_alpha$valor[85:139], na.rm = TRUE)
media_e <- mean(Coeficiente_e)
media_d <- mean(Coeficiente_d)
write.xlsx(TabelaBacen, "C:/Users/Lorenzo Costa/Desktop/multiplicador/TabelaBacen em xslx/TabelaBacen.xlsx")
write.xlsx(TabelaBacen, "C:/Users/Lorenzo Costa/Desktop/multiplicador/TabelaBacen em xslx/TabelaBacen.xlsx")
ggplot(data = SerieTemporal_e[85:139, ]) +
aes(x = data, y = valor) +
geom_line(colour = "red") +
labs(x = "Data", y = "Coeficiente 'e'") +
geom_point(colour = "black") +
theme_minimal()
media_multi <- mean(Multiplicador_mon)
mean(SerieTemporal_alpha$valor[85:139], na.rm = TRUE)
media_e <- mean(Coeficiente_e)
media_d <- mean(Coeficiente_d)
write.xlsx(TabelaBacen, "C:/Users/Lorenzo Costa/Desktop/multiplicador/TabelaBacen em xslx/TabelaBacen.xlsx")
ggplot(data = SerieTemporal_e) +
aes(x = data, y = valor) +
geom_line(colour = "red") +
labs(x = "Data", y = "Coeficiente 'e'") +
geom_point(colour = "black") +
theme_minimal()
ggplot(data = SerieTemporal_d) +
aes(x = data, y = valor) +
geom_line(colour = "blue") +
labs(x = "Data", y = "Coeficiente 'd'") +
geom_point(colour = "black") +
theme_minimal()
ggplot(data = Coeficientes) +
aes(x = data, y = Valor_de_e, color = "Valor_de_e") +
geom_line() +
geom_line(aes(y = Valor_de_d, color = "Valor_de_d")) +
labs(x = "Data", y = "Valores dos coeficientes") +
scale_color_manual(values = c("Valor_de_e" = "red", "Valor_de_d" = "blue")) +
theme_minimal()
ggplot(data = SerieTemporal_alpha, aes( x = data, y = valor)) +
geom_line(colour = "purple") +
labs(x = "Data", y = "alpha") +
geom_point(colour = "black") +
theme_minimal()
ggplot(data = SerieTemporal_alpha[85:139, ],aes( x = data, y = valor)) +
geom_line(colour = "purple") +
labs(x = "Data", y = "alpha") +
geom_point(colour = "black") +
theme_minimal()
library(GetBCBData)
library(dplyr)
library(pandoc)
library(ggplot2)
library(tibble)
library(tidyr)
library(kableExtra)
library(flextable)
library(openxlsx)
##Pegando os dados necessários pelo ID
#reservas bancárias =/ Encaixes Totais
TabelaResBan <- GetBCBData::gbcbd_get_series(
id =  1787,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#Papel Moeda no Poder Público
TabelaPMPP <- GetBCBData::gbcbd_get_series(
id = 27789 ,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#Base monetária
TabelaBASE <- GetBCBData::gbcbd_get_series(
id =  1788,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#Depósitos à vista
TabelaDepAvi <- GetBCBData::gbcbd_get_series(
id =  27790,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#Meios de pagamento = PMPP + DV (TOTAL DE M1)
TabelaMP <- GetBCBData::gbcbd_get_series(
id = 27791,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
###Identificando a classe das variáveis de interesse
class(TabelaResBan$value)
class(TabelaDepAvi$value)
class(TabelaMP$value)
class(TabelaBASE$value)
class(TabelaPMPP$value)
### Criando um vetor para ser a coluna de tempo
dates <- seq.Date(from = as.Date("2003-01-01"), to = as.Date("2023-12-01"), by = "month")
#criando vetores para cada valor do MP, DV, ResBan, PPMP e BASE MONETARIA
vetormp <- TabelaMP[[2]]
vetordepavi <- TabelaDepAvi[[2]]
vetorresban <- TabelaResBan[[2]]
vetorPPMP <- TabelaPMPP[[2]]
vetorBASE <- TabelaBASE[[2]]
#formatando os vetores
vetor_mp <- format(vetormp, big.mark = ".", decimal.mark = ",", scientific = FALSE)
vetor_depavi <- format(vetordepavi, big.mark = ".", decimal.mark = ",", scientific = FALSE)
vetor_resban <- format(vetorresban, big.mark = ".", decimal.mark = ",", scientific = FALSE)
vetor_PPMP <- format(vetorPPMP, big.mark = ".", decimal.mark = ",", scientific = FALSE)
vetor_BASE <- format(vetorBASE, big.mark = ".", decimal.mark = ",", scientific = FALSE)
#criação das séries temporais
###SABEMOS QUE B = PMPP + ENCAIXES TOTAIS / LOGO ENCAIXES TOTAIS = B - PMPP
#Função de subtração
Z <- function(s, t){
Resultado = s - t
return(Resultado)
}
#criando um vetor com os encaixes técnicos
VetorEncaixe <- mapply(Z, TabelaBASE[[2]], TabelaPMPP[[2]])
#Tabela do vetor de encaxe
TabelaEncaixe <- tibble(Data = dates, Valor = VetorEncaixe)
#Formatando o vetor_encaixe
Vetor_Encaixe <- format(VetorEncaixe, big.mark = ".", decimal.mark = ",", scientific = FALSE)
### juntando todas as variáveis em uma tabela só
TabelaBacen <- tibble(Data = dates, "Meios de Pagamentos" = vetor_mp,
"Depositos a vista" = vetor_depavi, "Encaixes Totais" = Vetor_Encaixe)
# Criando função para realizar o cálculo do coeficiente
X <- function(x,y){
Resultado = x/y
return(Resultado)
}
Coeficiente_e <- mapply(X, TabelaEncaixe[[2]], TabelaDepAvi[[2]])
Coeficiente_d <- mapply(X, TabelaDepAvi[,2], TabelaMP[,2])
SerieTemporal_e <- tibble(data = dates, valor = Coeficiente_e)
SerieTemporal_d <- tibble(data = dates, valor = Coeficiente_d)
y <- function(d,e){
Resultado = 1/(1-d * (1-e))
return(Resultado)
}
Coeficientes <- tibble(data = dates, Valor_de_e = Coeficiente_e, Valor_de_d = Coeficiente_d)
Multiplicador_mon <- mapply(y, Coeficientes[,3], Coeficientes[,2])
SerieTemporal_alpha <- tibble(data = dates, valor = Multiplicador_mon)
TabelaBacen <- TabelaBacen %>%
add_column(e = Coeficiente_e, d = Coeficiente_d, alpha = Multiplicador_mon, .after = "Encaixes Totais", .name_repair = "unique")
kable(TabelaBacen, format = "latex", longtable = TRUE, booktabs = TRUE, caption = "Valores das Variáveis no Tempo") %>%
kable_styling(latex_options = c("striped", "scale_down"), full_width = FALSE, font_size = 10)
ggplot(data = SerieTemporal_e) +
aes(x = data, y = valor) +
geom_line(colour = "red") +
labs(x = "Data", y = "Coeficiente 'e'") +
geom_point(colour = "black") +
theme_minimal()
ggplot(data = SerieTemporal_d) +
aes(x = data, y = valor) +
geom_line(colour = "blue") +
labs(x = "Data", y = "Coeficiente 'd'") +
geom_point(colour = "black") +
theme_minimal()
ggplot(data = Coeficientes) +
aes(x = data, y = Valor_de_e, color = "Valor_de_e") +
geom_line() +
geom_line(aes(y = Valor_de_d, color = "Valor_de_d")) +
labs(x = "Data", y = "Valores dos coeficientes") +
scale_color_manual(values = c("Valor_de_e" = "red", "Valor_de_d" = "blue")) +
theme_minimal()
ggplot(data = SerieTemporal_alpha, aes( x = data, y = valor)) +
geom_line(colour = "purple") +
labs(x = "Data", y = "alpha") +
geom_point(colour = "black") +
theme_minimal()
ggplot(data = SerieTemporal_alpha[85:139, ],aes( x = data, y = valor)) +
geom_line(colour = "purple") +
labs(x = "Data", y = "alpha") +
geom_point(colour = "black") +
theme_minimal()
ggplot(data = SerieTemporal_e[85:139, ]) +
aes(x = data, y = valor) +
geom_line(colour = "red") +
labs(x = "Data", y = "Coeficiente 'e'") +
geom_point(colour = "black") +
theme_minimal()
media_multi <- mean(Multiplicador_mon)
mean(SerieTemporal_alpha$valor[85:139], na.rm = TRUE)
media_e <- mean(Coeficiente_e)
media_d <- mean(Coeficiente_d)
write.xlsx(TabelaBacen, "C:/Users/Lorenzo Costa/Desktop/multiplicador/TabelaBacen em xslx/TabelaBacen.xlsx")
##Pegando os dados necessários pelo ID
#reservas bancárias =/ Encaixes Totais
TabelaResBan <- GetBCBData::gbcbd_get_series(
id =  1787,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#Papel Moeda no Poder Público
TabelaPMPP <- GetBCBData::gbcbd_get_series(
id = 27789 ,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#Base monetária
TabelaBASE <- GetBCBData::gbcbd_get_series(
id =  1788,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#Depósitos à vista
TabelaDepAvi <- GetBCBData::gbcbd_get_series(
id =  27790,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#Meios de pagamento = PMPP + DV (TOTAL DE M1)
TabelaMP <- GetBCBData::gbcbd_get_series(
id = 27791,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#IPCA
TabelaIPCA <- GetBCBData::gbcbd_get_series(
id = 433
first.date = "2003-01-01"
##Pegando os dados necessários pelo ID
#reservas bancárias =/ Encaixes Totais
TabelaResBan <- GetBCBData::gbcbd_get_series(
id =  1787,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#Papel Moeda no Poder Público
TabelaPMPP <- GetBCBData::gbcbd_get_series(
id = 27789 ,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#Base monetária
TabelaBASE <- GetBCBData::gbcbd_get_series(
id =  1788,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#Depósitos à vista
TabelaDepAvi <- GetBCBData::gbcbd_get_series(
id =  27790,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#Meios de pagamento = PMPP + DV (TOTAL DE M1)
TabelaMP <- GetBCBData::gbcbd_get_series(
id = 27791,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#IPCA
TabelaIPCA <- GetBCBData::gbcbd_get_series(
id = 433,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
View(TabelaIPCA)
bookdown::render_book(input = "Index.Rmd", output_format = "bookdown::pdf_book")
bookdown::render_book(input = "Index.Rmd", output_format = "bookdown::pdf_book")
bookdown::render_book(input = "index.Rmd", output_format = "bookdown::pdf_book")
bookdown::render_book(input = "index.Rmd", output_format = "bookdown::pdf_book")
bookdown::render_book(input = "index.Rmd", output_format = "bookdown::pdf_book")
bookdown::render_book(input = "index.Rmd", output_format = "bookdown::pdf_book")
bookdown::render_book("index.Rmd", output_format = "bookdown::pdf_book")
View(Coeficientes)
View(TabelaBacen)
View(Coeficientes)
ggplot(data = TabelaBacen) +
aes(x = data, y = e, color = "e") +
geom_line() +
geom_line(aes(y = d, color = "d")) +
goom_bar(aes(y = alpha, color = "alpha"))
ggplot(data = TabelaBacen) +
aes(x = data, y = e, color = "e") +
geom_line() +
geom_line(aes(y = d, color = "d")) +
goom_bar(aes(y = alpha, color = "alpha")) +
labs(x = "Data", y = "Valores") +
scale_color_manual(values = c("e" = "red", "d" = "blue", "alpha" = "purple")) +
theme_minimal()
ggplot(data = TabelaBacen) +
aes(x = data, y = e, color = "e") +
geom_line() +
geom_line(aes(y = d, color = "d")) +
goom_bar(aes(y = alpha, stat = "identity" color = "alpha")) +
library(GetBCBData)
library(dplyr)
library(pandoc)
library(ggplot2)
library(tibble)
library(tidyr)
library(kableExtra)
library(flextable)
library(openxlsx)
ggplot(data = TabelaBacen) +
aes(x = data, y = e, color = "e") +
geom_line() +
geom_line(aes(y = d, color = "d")) +
goom_bar(aes(y = alpha, stat = "identity" color = "alpha")) +
ggplot(data = TabelaBacen) +
aes(x = data, y = e, color = "e") +
geom_line() +
geom_line(aes(y = d, color = "d")) +
goom_bar(aes(y = alpha, stat = "identity", color = "alpha")) +
labs(x = "Data", y = "Valores") +
scale_color_manual(values = c("e" = "red", "d" = "blue", "alpha" = "purple")) +
theme_minimal()
ggplot(data = TabelaBacen) +
aes(x = data, y = e, color = "e") +
geom_line() +
geom_line(aes(y = d, color = "d")) +
geom_bar(aes(y = alpha, stat = "identity", color = "alpha")) +
labs(x = "Data", y = "Valores") +
scale_color_manual(values = c("e" = "red", "d" = "blue", "alpha" = "purple")) +
theme_minimal()
ggplot(data = TabelaBacen) +
aes(x = data, y = e, color = "e") +
geom_line() +
geom_line(aes(y = d, color = "d")) +
geom_bar(aes(y = alpha, color = "alpha"), stat = "identity") +
labs(x = "Data", y = "Valores") +
scale_color_manual(values = c("e" = "red", "d" = "blue", "alpha" = "purple")) +
theme_minimal()
library(scales)
ggplot(data = TabelaBacen) +
aes(x = data, y = e, color = "e") +
geom_line() +
geom_line(aes(y = d, color = "d")) +
geom_bar(aes(y = alpha, color = "alpha"), stat = "identity") +
labs(x = "Data", y = "Valores") +
scale_color_manual(values = c("e" = "red", "d" = "blue", "alpha" = "purple")) +
theme_minimal()
View(Coeficientes)
ggplot(data = TabelaBacen) +
aes(x = Data, y = e, color = "e") +
geom_line() +
geom_line(aes(y = d, color = "d")) +
geom_bar(aes(y = alpha, color = "alpha"), stat = "identity") +
labs(x = "Data", y = "Valores") +
scale_color_manual(values = c("e" = "red", "d" = "blue", "alpha" = "purple")) +
theme_minimal()
ggplot(data = TabelaBacen) +
aes(x = Data, y = e, color = "e") +
geom_line() +
geom_line(aes(y = d, color = "d")) +
geom_line(aes(y = alpha, color = "alpha")) +
labs(x = "Data", y = "Valores") +
scale_color_manual(values = c("e" = "red", "d" = "blue", "alpha" = "purple")) +
theme_minimal()
plot(TabelaBacen$Data, TabelaBacen$e, type = "l", col = "red", ylim = c(0, 1),
xlab = "Data", ylab = "Valores de e e d", xaxt = "n")
lines(TabelaBacen$Data, TabelaBacen$d, col = "blue")
axis(1, at = 1:length(TabelaBacen$Data), labels = TabelaBacen$Data)
axis(1, at = 1:length(TabelaBacen$Data), labels = TabelaBacen$Data)
plot(TabelaBacen$Data, TabelaBacen$e, type = "l", col = "red", ylim = c(0, 1),
xlab = "Data", ylab = "Valores de e e d", xaxt = "n")
lines(TabelaBacen$Data, TabelaBacen$d, col = "blue")
par(new = TRUE)
plot(TabelaBacen$Data, TabelaBacen$alpha, type = "l", col = "purple", ylim = c(1, 2),
xlab = "", ylab = "Valores de alpha", xaxt = "n", yaxt = "n", bty = "n")
axis(4, at = seq(1, 2, by = 0.2))
mtext("Valores de alpha", side = 4, line = 3)
coef <- max(TabelaBacen$e, TabelaBacen$d) / max(TabelaBacen$alpha)
ggplot(data = TabelaBacen, aes( x = Data)) +
geom_line(aes(y = e, color = "e")) +
geom_line(aes(y = d, color = "d")) +
geom_line(aes(y = alpha / coef, color = "alpha")) +
scale_y_continuous(
name = "Valores de e e d",
sec.axis = sec_axis(~. * coeficiente, name = "Valores de alpha")
) +
scale_color_manual(values = c("e" = "red", "d" = "blue", "alpha" = "purple")) +
labs(x = "Data", y = "Valores") +
theme_minimal()
coef <- max(TabelaBacen$e, TabelaBacen$d) / max(TabelaBacen$alpha)
ggplot(data = TabelaBacen, aes( x = Data)) +
geom_line(aes(y = e, color = "e")) +
geom_line(aes(y = d, color = "d")) +
geom_line(aes(y = alpha / coef, color = "alpha")) +
scale_y_continuous(
name = "Valores de e e d",
sec.axis = sec_axis(~. * coef, name = "Valores de alpha")
) +
scale_color_manual(values = c("e" = "red", "d" = "blue", "alpha" = "purple")) +
labs(x = "Data", y = "Valores") +
theme_minimal()
coef <- max(TabelaBacen$e, TabelaBacen$d) / max(TabelaBacen$alpha)
ggplot(data = TabelaBacen, aes( x = Data)) +
geom_line(aes(y = e, color = "e")) +
geom_line(aes(y = d, color = "d")) +
geom_line(aes(y = alpha / coef, color = "alpha")) +
scale_y_continuous(
coef <- max(TabelaBacen$e, TabelaBacen$d) / max(TabelaBacen$alpha)
ggplot(data = TabelaBacen, aes( x = Data)) +
geom_line(aes(y = e, color = "e")) +
geom_line(aes(y = d, color = "d")) +
geom_line(aes(y = alpha / coef, color = "alpha")) +
coef <- max(TabelaBacen$e, TabelaBacen$d) / max(TabelaBacen$alpha)
ggplot(data = TabelaBacen, aes( x = Data)) +
geom_line(aes(y = e, color = "e")) +
geom_line(aes(y = d, color = "d")) +
geom_line(aes(y = alpha / coef, color = "alpha"))
ggplot(data = TabelaBacen, aes(x = Data)) +
geom_line(aes(y = e, color = "e")) +
geom_line(aes(y = d, color = "d")) +
geom_line(aes(y = alpha * fator_transformacao, color = "alpha")) +
scale_y_continuous(
name = "Valores de e e d",
sec.axis = sec_axis(~ . / fator_transformacao, name = "Valores de alpha")
) +
scale_color_manual(values = c("e" = "red", "d" = "blue", "alpha" = "purple")) +
labs(x = "Data", y = "Valores") +
theme_minimal()
fator_transformacao <- max(TabelaBacen$e, TabelaBacen$d) / max(TabelaBacen$alpha)
ggplot(data = TabelaBacen, aes(x = Data)) +
geom_line(aes(y = e, color = "e")) +
geom_line(aes(y = d, color = "d")) +
geom_line(aes(y = alpha * fator_transformacao, color = "alpha")) +
scale_y_continuous(
name = "Valores de e e d",
sec.axis = sec_axis(~ . / fator_transformacao, name = "Valores de alpha")
) +
scale_color_manual(values = c("e" = "red", "d" = "blue", "alpha" = "purple")) +
labs(x = "Data", y = "Valores") +
theme_minimal()
par(mar = c(5, 4, 4, 5) + 0.3)
plot(TabelaBacen$Data, TabelaBacen$e, type = "l", col = "red", ylim = c(0, 1),
xlab = "Data", ylab = "Valores de e e d, xaxt = "n"")
par(mar = c(5, 4, 4, 5) + 0.3)
plot(TabelaBacen$Data, TabelaBacen$e, type = "l", col = "red", ylim = c(0, 1),
xlab = "Data", ylab = "Valores de e e d, xaxt = "n")
par(mar = c(5, 4, 4, 5) + 0.3)
plot(TabelaBacen$Data, TabelaBacen$e, type = "l", col = "red", ylim = c(0, 1),
xlab = "Data", ylab = "Valores de e e d", xaxt = "n")
lines(TabelaBacen$Data, TabelaBacen$d, col = "blue")
axis(1, at = 1:length(TabelaBacen$Data), labels = TabelaBacen$Data)
par(mar = c(5, 4, 4, 5) + 0.3)
plot(TabelaBacen$Data, TabelaBacen$e, type = "l", col = "red", ylim = c(0, 1),
xlab = "Data", ylab = "Valores de e e d", xaxt = "n")
lines(TabelaBacen$Data, TabelaBacen$d, col = "blue")
axis(1, at = 1:length(TabelaBacen$Data), labels = TabelaBacen$Data)
par(new = TRUE)
plot(TabelaBacen$Data, TabelaBacen$alpha, type = "l", col = "purple", ylim = c(1, 2),
xlab = "", ylab = "Valores de alpha", xaxt = "n", yaxt = "n", bty = "n")
axis(4, at = seq(1, 2, by = 0.2))
mtext("Valores de alpha", side = 4, line = 3)
legend("topright", legend = c("e", "d", "alpha"), col = c("red", "blue", "purple"), lty = 1)
ggplot(data = Coeficientes) +
aes(x = data, y = Valor_de_e, color = "Valor_de_e") +
geom_line() +
geom_line(aes(y = Valor_de_d, color = "Valor_de_d")) +
labs(x = "Data", y = "Valores dos coeficientes") +
scale_color_manual(values = c("Valor_de_e" = "red", "Valor_de_d" = "blue")) +
theme_minimal()
ggplot(data = SerieTemporal_d) +
aes(x = data, y = valor) +
geom_line(colour = "blue") +
labs(x = "Data", y = "Coeficiente 'd'") +
geom_point(colour = "black") +
theme_minimal()
