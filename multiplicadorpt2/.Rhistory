#Puxando a Tabela de PIB e tratando-a
dados_pib <- read.xlsx("C:/Users/Lorenzo Costa/Desktop/Trabalhos/Economia Monetaria/multiplicadorpt2/tabelaPIB.xlsx", sheet = "Tabela")
anos <- seq(2003,2021, by = 1)
print(anos, max.print = Inf)
vetorPIB <- as.numeric(dados_pib[4, -1])
print(vetorPIB, max.print = Inf)
vetor_PIB <-format(vetorPIB, big.mark = ".", decimal.mark = ",", scientific = FALSE)
TabelaPIB <- tibble(Data = anos, "PIB valores correntes(milhões)" = vetor_PIB)
TabelaPIB$`PIB valores correntes(milhões)` <- as.numeric(gsub("\\.", "", TabelaPIB$`PIB valores correntes(milhões)`))
diffPIB <- diff(TabelaPIB$`PIB valores correntes(milhões)`)
porcentoPIB <- (diffPIB / head(TabelaPIB$`PIB valores correntes(milhões)`, -1)) * 100
PIBvari <- c(NA, porcentoPIB)
TabelaPIB <- TabelaPIB %>%
add_column("Variação Percentual (%)" = PIBvari, .after = "PIB valores correntes(milhões)")
#Repetir para que o PIB volte a ser numérico novamente
### Criando um vetor para ser a coluna de tempo
dates <- seq.Date(from = as.Date("2003-01-01"), to = as.Date("2023-12-01"), by = "month")
#criando vetores das tabelas (não terá o vetor PIB - ja foi criado anteriormente)
vetormp <- TabelaMP[[2]]
vetordepavi <- TabelaDepAvi[[2]]
vetorresban <- TabelaResBan[[2]]
vetorPPMP <- TabelaPMPP[[2]]
vetorBASE <- TabelaBASE[[2]]
vetorM1 <- TabelaM1[[2]]
vetorM2 <- TabelaM2[[2]]
vetorM3 <- TabelaM3[[2]]
vetorM4 <- TabelaM4[[2]]
vetorIPCA <- TabelaIPCA[[2]]
vetorSELIC <- TabelaSELIC[[2]]
#formatando os vetores
vetor_mp <- format(vetormp, big.mark = ".", decimal.mark = ",", scientific = FALSE)
vetor_depavi <- format(vetordepavi, big.mark = ".", decimal.mark = ",", scientific = FALSE)
vetor_resban <- format(vetorresban, big.mark = ".", decimal.mark = ",", scientific = FALSE)
vetor_PPMP <- format(vetorPPMP, big.mark = ".", decimal.mark = ",", scientific = FALSE)
vetor_BASE <- format(vetorBASE, big.mark = ".", decimal.mark = ",", scientific = FALSE)
vetor_M1 <- format(vetorM1, big.mark = ".", decimal.mark = ",", scientific = FALSE)
vetor_M2 <- format(vetorM2, big.mark = ".", decimal.mark = ",", scientific = FALSE)
vetor_M3 <- format(vetorM3, big.mark = ".", decimal.mark = ",", scientific = FALSE)
vetor_M4 <- format(vetorM4, big.mark = ".", decimal.mark = ",", scientific = FALSE)
#criação das séries temporais
###SABEMOS QUE B = PMPP + ENCAIXES TOTAIS / LOGO ENCAIXES TOTAIS = B - PMPP
#Função de subtração
Z <- function(s, t){
Resultado = s - t
return(Resultado)
}
#criando um vetor com os encaixes técnicos
VetorEncaixe <- mapply(Z, TabelaBASE[[2]], TabelaPMPP[[2]])
#Tabela do vetor de encaxe
TabelaEncaixe <- tibble(Data = dates, Valor = VetorEncaixe)
#Formatando o vetor_encaixe
Vetor_Encaixe <- format(VetorEncaixe, big.mark = ".", decimal.mark = ",", scientific = FALSE)
### juntando todas os dados monetários em uma tabela só
TabelaCoeficientes <- tibble(Data = dates, "Meios de Pagamentos" = vetor_mp,
"Depositos a vista" = vetor_depavi, "Encaixes Totais" = Vetor_Encaixe)
# Criando função para realizar o cálculo do coeficiente
X <- function(x,y){
Resultado = x/y
return(Resultado)
}
#Fazendo os cálculos do coeficiente "e" e "d" entre colunas de dois dataframes diferentes.
Coeficiente_e <- mapply(X, TabelaEncaixe[[2]], TabelaDepAvi[[2]])
Coeficiente_d <- mapply(X, TabelaDepAvi[,2], TabelaMP[,2])
# Criando dois tibbles para as séries temporais de "e" e "d"
SerieTemporal_e <- tibble(data = dates, valor = Coeficiente_e)
SerieTemporal_d <- tibble(data = dates, valor = Coeficiente_d)
#Criando a função de multiplicador monetário
y <- function(d,e){
Resultado = 1/(1-d * (1-e))
return(Resultado)
}
# Criando uma tible com todos os 2 coeficientes
Coeficientes <- tibble(data = dates, Valor_de_e = Coeficiente_e, Valor_de_d = Coeficiente_d)
# Fazendo o cálculo do multiplicador bancário entre colunas de dois dataframes e fazendo o gráfico dele.
Multiplicador_mon <- mapply(y, Coeficientes[,3], Coeficientes[,2])
SerieTemporal_alpha <- tibble(data = dates, valor = Multiplicador_mon)
# Adicionando colunas a uma tabela com TODOS os coeficientes.
TabelaCoeficientes <- TabelaCoeficientes %>%
add_column(e = Coeficiente_e, d = Coeficiente_d, alpha = Multiplicador_mon, .after = "Encaixes Totais", .name_repair = "unique")
kable(TabelaCoeficientes, format = "html", longtable = TRUE, booktabs = TRUE, caption = "Valores dos Coeficientes no Tempo") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
kable(TabelaAgregados, format = "html", longtable = TRUE, booktabs = TRUE, caption = "Valores dos Agregados e Selic") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
kable(TabelaPIB, format = "html", booktabs = TRUE, caption = "Valores do PIB") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
#Criação das variações no tempo dos agregados
diffM1 <- diff(TabelaAgregados$M1)
percentoM1 <- (diffM1 / head(TabelaAgregados$M1, -1)) * 100
M1vari <- c(NA, percentoM1)
diffM2 <- diff(TabelaAgregados$M2)
percentoM2 <- (diffM2 / head(TabelaAgregados$M2, -1)) * 100
M2vari <- c(NA, percentoM2)
diffM3 <- diff(TabelaAgregados$M3)
percentoM3 <- (diffM3 / head(TabelaAgregados$M3, -1)) * 100
M3vari <- c(NA, percentoM3)
diffM4 <- diff(TabelaAgregados$M4)
percentoM4 <- (diffM4 / head(TabelaAgregados$M4, -1)) * 100
M4vari <- c(NA, percentoM4)
diffIPCA <- diff(TabelaAgregados$IPCA)
percentoIPCA <- (diffIPCA / head(TabelaAgregados$IPCA, -1)) * 100
IPCAvari <- c(NA, percentoIPCA)
diffSELIC <- diff(TabelaAgregados$SELIC)
percentoSELIC <- (diffSELIC / head(TabelaAgregados$SELIC, -1)) * 100
SELICvari <- c(NA, percentoSELIC)
#Criação da Tabela das variações percentuais
VariacoesPercentuais <- tibble(Data = dates, "M1 (%)" = M1vari, "M2 (%)" = M2vari, "M3 (%)" = M3vari, "M4 (%)" = M4vari,
"IPCA (%)" = IPCAvari, "SELIC (%)" = SELICvari)
#Criação da Tabela em HTML
kable(VariacoesPercentuais, format = "html", booktabs = TRUE) %>%
kable_styling(bootstrap_options = c( "hover", "condensed", "stripped"))
#TabelaAgregados$SELIC <- as.numeric(sub(",", ".", gsub("\\.", "", TabelaAgregados$SELIC), fixed = TRUE))
#
#Criando a Tabela de estatística para A TabelaAgregados, que já são numéricos. (só é possível tirar essa estatística de valores numéricos)
#sapply(TabelaAgregados, class)
#summary(TabelaAgregados)
#sapply(TabelaAgregados, sd)
#summary(TabelaPIB)
#sapply(TabelaPIB, sd)
#max(VariacoesPercentuais$M1, na.rm = TRUE)
#max(VariacoesPercentuais$M2, na.rm = TRUE)
#max(VariacoesPercentuais$M3, na.rm = TRUE)
#max(VariacoesPercentuais$M4, na.rm = TRUE)
#max(TabelaPIB$`Variação Percentual`, na.rm = TRUE)
#max(TabelaAgregados$IPCA)
#min(VariacoesPercentuais$M1, na.rm = TRUE)
#min(VariacoesPercentuais$M2, na.rm = TRUE)
#min(VariacoesPercentuais$M3, na.rm = TRUE)
#min(VariacoesPercentuais$M4, na.rm = TRUE)
#min(TabelaPIB$`Variação Percentual`, na.rm = TRUE)
#min(TabelaAgregados$IPCA)
#min(VariacoesPercentuais$`IPCA (%)`[is.finite(VariacoesPercentuais$`IPCA (%)`)], na.rm = TRUE)
estatM1 <- c("653.420.212", "86.231.763", "311.848.406", "160.128.500", "22.87 (2007-12)", "-17.58 (2008-01)")
estatM2 <- c("5.913.000.000", "385.500.000", "2.066.000.000", "1.407.171.000", "6.36 (2007-12)", "-3.12 (2008-01)")
estatM3 <- c("10.860.000.000", "696.100.000", "4.239.000.000", "2.822.259.000", "5.73 (2010-01)", "-1.26 (2019-01)")
estatM4 <- c("11.950.000.000", "810.300.000", "4.616.000.000", "3.046.371.000", " 4.49 (2007-09)", "-0.87 (2019-01)")
estatPIB <- c("9.012.142", "1.717.950", "4.814.316", "2.182.850", "18.43 (2021)", "2.98 (2020)")
estatIPCA <- c("2.250 (2003-01)" , "-0.680 (2022-07)", "0.450", "0,3563829", "2400 (2014-08)" ,"-1350 (2005-07)")
estatSELIC <- c("26.32 (2003-03)", "1.90 (2020-12)", "11.44", "4.863212", "-17.53 (2020-05)", "24.15 (2021-05)")
TabelaEstatAg <- tibble(Estatística = vetorestatVARI, M1 = estatM1, M2 = estatM2, M3 = estatM3, M4 = estatM4,
PIB = estatPIB, IPCA = estatIPCA, SELIC = estatSELIC)
kable(TabelaEstatAg, format = "html", longtable = TRUE, booktabs = TRUE) %>%
kable_styling(bootstrap_options = c( "stripped", "hover", "condensed"), font_size = 12)
#Colocando os valores em decimais para fazer o cálculo da média móvel
#sapply(TabelaAgregados, class)
TabelaAgregados <- as.data.frame(TabelaAgregados)
#Fazendo a média móvel (12meses)
TabelaAgregados$rollmeanIPCA <- rollmean(TabelaAgregados$IPCA, 12, fill = NA, align = 'right')
TabelaAgregados$rollmeanSELIC <- rollmean(TabelaAgregados$SELIC, 12, fill = NA, align = 'right')
TabelaAgregados$rollmeanIPCA3 <- rollmean(TabelaAgregados$IPCA, 3, fill = NA, align = 'right')
TabelaAgregados$rollmeanSELIC3 <- rollmean(TabelaAgregados$SELIC, 3, fill = NA, align = 'right')
#Criando Tabela de Correlação entre os Agregados monetários e a Taxa Selic
#sapply(TabelaPIB, class)
#  add_lines(data = TabelaAgregados, x = ~Data, y = ~IPCA, name = "IPCA", color = I("pink"),
#yaxis = "y2")
#Criando uma gráfico plotly com M1 e IPCA
p1 <- plot_ly() %>%
add_lines(data = TabelaAgregados, x = ~Data, y = ~M1, name = "M1", color = I("green")) %>%
add_lines(data = TabelaAgregados, x = ~Data, y = ~rollmeanIPCA, name = "Média Móvel", color = I('purple2'),
yaxis = "y2")
p1 <- p1 %>%
layout(
title = "M1 em relação ao IPCA",
yaxis = list(title = "M1"),
yaxis2 = list(
title = "IPCA",
overlaying = "y",
side = "right"
)
)
p1
# Fazendo o mesmo para M2 e IPCA
p2 <- plot_ly() %>%
add_lines(data = TabelaAgregados, x = ~Data, y = ~M2, name = "M2", color = I("lawngreen")) %>%
add_lines(data = TabelaAgregados, x = ~Data, y = ~rollmeanIPCA, name = "Média Móvel", color = I('purple2'),
yaxis = "y2")
p2 <- p2 %>%
layout(
title = "M2 em relação ao IPCA",
yaxis = list(title = "M2"),
yaxis2 = list(
title = "IPCA",
overlaying = "y",
side = "right"
)
)
p2
# Fazendo o mesmo para M3 e IPCA
p3 <- plot_ly() %>%
add_lines(data = TabelaAgregados, x = ~Data, y = ~M3, name = "M3", color = I("yellow")) %>%
add_lines(data = TabelaAgregados, x = ~Data, y = ~rollmeanIPCA, name = "Média Móvel", color = I('purple2'),
yaxis = "y2")
p3 <- p3 %>%
layout(
title = "M3 em relação ao IPCA",
yaxis = list(title = "M3"),
yaxis2 = list(
title = "IPCA",
overlaying = "y",
side = "right"
)
)
p3
# Fazendo o mesmo para M4 e IPCA
p4 <- plot_ly() %>%
add_lines(data = TabelaAgregados, x = ~Data, y = ~M4, name = "M4", color = I("orange")) %>%
add_lines(data = TabelaAgregados, x = ~Data, y = ~rollmeanIPCA, name = "Média Móvel", color = I('purple2'),
yaxis = "y2")
p4 <- p4 %>%
layout(
title = "M4 em relação ao IPCA",
yaxis = list(title = "M4"),
yaxis2 = list(
title = "IPCA",
overlaying = "y",
side = "right"
)
)
p4
colnames(TabelaPIB)[colnames(TabelaPIB) == "PIB valores correntes(milhões)"] <- "PIB_Valores_Correntes_milhoes"
Plotpib <- plot_ly() %>%
add_lines(data = TabelaAgregados, x = ~Data, y = ~M1, name = "M1", color = I("green")) %>%
add_lines(data = TabelaAgregados, x = ~Data, y = ~M2, name = "M2", color = I("lawngreen")) %>%
add_lines(data = TabelaAgregados, x = ~Data, y = ~M3, name = "M3", color = I("yellow")) %>%
add_lines(data = TabelaAgregados, x = ~Data, y = ~M4, name = "M4", color = I("orange")) %>%
add_lines(data = TabelaPIB, x = ~Data, y = ~PIB_Valores_Correntes_milhoes, name = "PIB valores correntes(milhões)", yaxis = "y2", color = I("darkblue"))
# Configuração do layout com múltiplos eixos Y
Plotpib <- Plotpib %>%
layout(
autosize = F, # Desativa o dimensionamento automático
width = 800,  # Largura do gráfico em pixels
height = 600, # Altura do gráfico em pixels
margin = list(l = 50, r = 50, b = 100, t = 100, pad = 4),
title = "PIB e os Agregados Monetários",
yaxis = list(title = "Agregados Monetários (M1, M2, M3, M4)"),
yaxis2 = list(
title = "PIB",
overlaying = "y",
side = "right",
anchor = "free",
position = 1.00
)
)
# Renderização do gráfico
Plotpib
ImpcAgre <- TabelaAgregados %>%
slice(150:161)
impcPib <- TabelaPIB %>%
slice(12:14)
colnames(impcPib)[colnames(impcPib) == "Variação Percentual (%)"] <- "Variação_Percentual"
Plotpib2 <- plot_ly() %>%
add_lines(data = impcPib, x = ~Data, y = ~PIB_Valores_Correntes_milhoes, name = "PIB valores correntes(milhões)", color = I("darkblue")) %>%
add_lines(data = impcPib, x = ~Data, y = ~Variação_Percentual, name = "PIB em Variação Percentual (%)", yaxis = "y2", color = I("blue"))
# Configuração do layout com múltiplos eixos Y
Plotpib2 <- Plotpib2 %>%
layout(
autosize = F, # Desativa o dimensionamento automático
width = 800,  # Largura do gráfico em pixels
height = 600, # Altura do gráfico em pixels
margin = list(l = 50, r = 50, b = 100, t = 100, pad = 4),
title = "PIB e a variação nos anos próximos",
yaxis = list(title = "PIB a valores correntes"),
yaxis2 = list(
title = "PIB em Variação Percentual (%)",
overlaying = "y",
side = "right",
anchor = "free",
position = 1.00
)
)
# Renderização do gráfico
Plotpib2
# criando multiplos ggplots
# Formatando os próximos plots para saírem embutidos:
par(mfrow = c(2, 2), oma = c(0, 0, 6, 0))
#Criando uma gráfico plot com M1 e SELIC
plot(TabelaAgregados$Data, TabelaAgregados$M1, type = "l",
col = "green", ylim = c(min(TabelaAgregados$M1),
max(TabelaAgregados$M1)),
ylab = "M1", xlab = "Data", cex.lab = 2.0, cex.axis = 1.5)
#sobrepondo esse gráfico com outro plot para a taxa selic
par(new = TRUE)
plot(TabelaAgregados$Data, TabelaAgregados$rollmeanSELIC, type = "l",
col = "cyan", axes = FALSE, xlab = "", ylab = "",
ylim = c(min(rollmeanSELIC$SELIC),
max(rollmeanSELIC$SELIC)))
View(TabelaAgregados)
# criando multiplos ggplots
# Formatando os próximos plots para saírem embutidos:
par(mfrow = c(2, 2), oma = c(0, 0, 6, 0))
#Criando uma gráfico plot com M1 e SELIC
plot(TabelaAgregados$Data, TabelaAgregados$M1, type = "l",
col = "green", ylim = c(min(TabelaAgregados$M1),
max(TabelaAgregados$M1)),
ylab = "M1", xlab = "Data", cex.lab = 2.0, cex.axis = 1.5)
#sobrepondo esse gráfico com outro plot para a taxa selic
par(new = TRUE)
plot(TabelaAgregados$Data, TabelaAgregados$rollmeanSELIC, type = "l",
col = "cyan", axes = FALSE, xlab = "", ylab = "",
ylim = c(min(TabelaAgregados$rollmeanSELIC),
max(TabelaAgregados$rollmeanSELIC)))
View(TabelaAgregados)
p5 <- plot_ly() %>%
add_lines(data = TabelaAgregados, x = ~Data, y = ~rollmeanSELIC, name = "Média Móvel SELIC", color = I('cyan4')) %>%
add_lines(data = TabelaAgregados, x = ~Data, y = ~rollmeanIPCA, name = "Média Móvel IPCA", color = I('purple2'),
yaxis = 'y2')
p5 <- p5 %>%
layout(
title = "Comparação entre as médias móveis de 12 meses do IPCA e da SELIC",
yaxis = list(title = "SELIC"),
yaxis2 = list(
title = "IPCA",
overlaying = "y",
side = "right"
)
)
p5
#Criando Tabela de Correlação entre os Agregados monetários e a Taxa Selic
#sapply(TabelaPIB, class)
#  add_lines(data = TabelaAgregados, x = ~Data, y = ~IPCA, name = "IPCA", color = I("pink"),
#yaxis = "y2")
#Criando uma gráfico plotly com M1 e IPCA
p1 <- plot_ly() %>%
add_lines(data = TabelaAgregados, x = ~Data, y = ~M1, name = "M1", color = I("green")) %>%
add_lines(data = TabelaAgregados, x = ~Data, y = ~rollmeanIPCA, name = "Média Móvel de 12 meses", color = I('purple2'),
yaxis = "y2")
p1 <- p1 %>%
layout(
title = "M1 em relação ao IPCA",
yaxis = list(title = "M1"),
yaxis2 = list(
title = "IPCA",
overlaying = "y",
side = "right"
)
)
p1
# Fazendo o mesmo para M2 e IPCA
p2 <- plot_ly() %>%
add_lines(data = TabelaAgregados, x = ~Data, y = ~M2, name = "M2", color = I("lawngreen")) %>%
add_lines(data = TabelaAgregados, x = ~Data, y = ~rollmeanIPCA, name = "Média Móvel de 12 meses", color = I('purple2'),
yaxis = "y2")
p2 <- p2 %>%
layout(
title = "M2 em relação ao IPCA",
yaxis = list(title = "M2"),
yaxis2 = list(
title = "IPCA",
overlaying = "y",
side = "right"
)
)
p2
# Fazendo o mesmo para M3 e IPCA
p3 <- plot_ly() %>%
add_lines(data = TabelaAgregados, x = ~Data, y = ~M3, name = "M3", color = I("yellow")) %>%
add_lines(data = TabelaAgregados, x = ~Data, y = ~rollmeanIPCA, name = "Média Móvel de 12 meses", color = I('purple2'),
yaxis = "y2")
p3 <- p3 %>%
layout(
title = "M3 em relação ao IPCA",
yaxis = list(title = "M3"),
yaxis2 = list(
title = "IPCA",
overlaying = "y",
side = "right"
)
)
p3
# Fazendo o mesmo para M4 e IPCA
p4 <- plot_ly() %>%
add_lines(data = TabelaAgregados, x = ~Data, y = ~M4, name = "M4", color = I("orange")) %>%
add_lines(data = TabelaAgregados, x = ~Data, y = ~rollmeanIPCA, name = "Média Móvel de 12 meses", color = I('purple2'),
yaxis = "y2")
p4 <- p4 %>%
layout(
title = "M4 em relação ao IPCA",
yaxis = list(title = "M4"),
yaxis2 = list(
title = "IPCA",
overlaying = "y",
side = "right"
)
)
p4
#Criando uma gráfico plotly com M1 e IPCA
p9 <- plot_ly() %>%
add_lines(data = ImpcAgre, x = ~Data, y = ~M1, name = "M1", color = I("green")) %>%
add_lines(data = ImpcAgre, x = ~Data, y = ~rollmeanIPCA3, name = "Média Móvel de 3 meses", color = I('purple2'),
yaxis = "y2")
p9 <- p9 %>%
layout(
title = "M1 em relação ao IPCA",
yaxis = list(title = "M1"),
yaxis2 = list(
title = "IPCA",
overlaying = "y",
side = "right"
)
)
p9
# Fazendo o mesmo para M2 e IPCA
p6 <- plot_ly() %>%
add_lines(data = ImpcAgre, x = ~Data, y = ~M2, name = "M2", color = I("lawngreen")) %>%
add_lines(data = ImpcAgre, x = ~Data, y = ~rollmeanIPCA3, name = "Média Móvel de 3 meses", color = I('purple2'),
yaxis = "y2")
p6 <- p6 %>%
layout(
title = "M2 em relação ao IPCA",
yaxis = list(title = "M2"),
yaxis2 = list(
title = "IPCA",
overlaying = "y",
side = "right"
)
)
p6
# Fazendo o mesmo para M3 e IPCA
p7 <- plot_ly() %>%
add_lines(data = ImpcAgre, x = ~Data, y = ~M3, name = "M3", color = I("yellow")) %>%
add_lines(data = ImpcAgre, x = ~Data, y = ~rollmeanIPCA, name = "Média Móvel de 3 meses", color = I('purple2'),
yaxis = "y2")
p7 <- p7 %>%
layout(
title = "M3 em relação ao IPCA",
yaxis = list(title = "M3"),
yaxis2 = list(
title = "IPCA",
overlaying = "y",
side = "right"
)
)
p7
# Fazendo o mesmo para M4 e IPCA
p8 <- plot_ly() %>%
add_lines(data = ImpcAgre, x = ~Data, y = ~M4, name = "M4", color = I("orange")) %>%
add_lines(data = ImpcAgre, x = ~Data, y = ~rollmeanIPCA, name = "Média Móvel de 3 meses", color = I('purple2'),
yaxis = "y2")
p8 <- p8 %>%
layout(
title = "M4 em relação ao IPCA",
yaxis = list(title = "M4"),
yaxis2 = list(
title = "IPCA",
overlaying = "y",
side = "right"
)
)
p8
#Criando uma gráfico plotly com M1 e IPCA
p9 <- plot_ly() %>%
add_lines(data = ImpcAgre, x = ~Data, y = ~M1, name = "M1", color = I("green")) %>%
add_lines(data = ImpcAgre, x = ~Data, y = ~rollmeanIPCA3, name = "Média Móvel de 3 meses", color = I('purple2'),
yaxis = "y2")
p9 <- p9 %>%
layout(
title = "M1 em relação ao IPCA",
yaxis = list(title = "M1"),
yaxis2 = list(
title = "IPCA",
overlaying = "y",
side = "right"
)
)
p9
# Fazendo o mesmo para M2 e IPCA
p6 <- plot_ly() %>%
add_lines(data = ImpcAgre, x = ~Data, y = ~M2, name = "M2", color = I("lawngreen")) %>%
add_lines(data = ImpcAgre, x = ~Data, y = ~rollmeanIPCA3, name = "Média Móvel de 3 meses", color = I('purple2'),
yaxis = "y2")
p6 <- p6 %>%
layout(
title = "M2 em relação ao IPCA",
yaxis = list(title = "M2"),
yaxis2 = list(
title = "IPCA",
overlaying = "y",
side = "right"
)
)
p6
# Fazendo o mesmo para M3 e IPCA
p7 <- plot_ly() %>%
add_lines(data = ImpcAgre, x = ~Data, y = ~M3, name = "M3", color = I("yellow")) %>%
add_lines(data = ImpcAgre, x = ~Data, y = ~rollmeanIPCA3, name = "Média Móvel de 3 meses", color = I('purple2'),
yaxis = "y2")
p7 <- p7 %>%
layout(
title = "M3 em relação ao IPCA",
yaxis = list(title = "M3"),
yaxis2 = list(
title = "IPCA",
overlaying = "y",
side = "right"
)
)
p7
# Fazendo o mesmo para M4 e IPCA
p8 <- plot_ly() %>%
add_lines(data = ImpcAgre, x = ~Data, y = ~M4, name = "M4", color = I("orange")) %>%
add_lines(data = ImpcAgre, x = ~Data, y = ~rollmeanIPCA3, name = "Média Móvel de 3 meses", color = I('purple2'),
yaxis = "y2")
p8 <- p8 %>%
layout(
title = "M4 em relação ao IPCA",
yaxis = list(title = "M4"),
yaxis2 = list(
title = "IPCA",
overlaying = "y",
side = "right"
)
)
p8
