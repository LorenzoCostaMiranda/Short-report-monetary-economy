TabelaResBan <- GetBCBData::gbcbd_get_series(
id =  1787,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#Papel Moeda no Poder Público
TabelaPMPP <- GetBCBData::gbcbd_get_series(
id = 27789 ,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#Base monetária
TabelaBASE <- GetBCBData::gbcbd_get_series(
id =  1788,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#Depósitos à vista
TabelaDepAvi <- GetBCBData::gbcbd_get_series(
id =  27790,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#Meios de pagamento = PMPP + DV (TOTAL DE M1)
TabelaMP <- GetBCBData::gbcbd_get_series(
id = 27791,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#M1
TabelaM1 <- GetBCBData::gbcbd_get_series(
id = 27791,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#M2
TabelaM2 <- GetBCBData::gbcbd_get_series(
id = 27810,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#M3
TabelaM3 <- GetBCBData::gbcbd_get_series(
id = 27813,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#M4
TabelaM4 <- GetBCBData::gbcbd_get_series(
id = 27815,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#IPCA
TabelaIPCA <- GetBCBData::gbcbd_get_series(
id = 433,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#Taxa Selic
TabelaSELIC <- GetBCBData::gbcbd_get_series(
id = 4189,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#Puxando a Tabela de PIB e tratando-a
dados_pib <- read.xlsx("C:/Users/Lorenzo Costa/Desktop/Trabalhos/Economia Monetária/multiplicadorpt2/tabelaPIB.xlsx", sheet = "Tabela")
anos <- seq(2003,2021, by = 1)
print(anos, max.print = Inf)
vetorPIB <- as.numeric(dados_pib[4, -1])
print(vetorPIB, max.print = Inf)
vetor_PIB <-format(vetorPIB, big.mark = ".", decimal.mark = ",", scientific = FALSE)
TabelaPIB <- tibble(Data = anos, "PIB valores correntes(milhões)" = vetor_PIB)
TabelaPIB$`PIB valores correntes(milhões)` <- as.numeric(gsub("\\.", "", TabelaPIB$`PIB valores correntes(milhões)`))
diffPIB <- diff(TabelaPIB$`PIB valores correntes(milhões)`)
porcentoPIB <- (diffPIB / head(TabelaPIB$`PIB valores correntes(milhões)`, -1)) * 100
PIBvari <- c(NA, porcentoPIB)
kable(TabelaAgregados, format = "html", longtable = TRUE, booktabs = TRUE, caption = "Valores dos Agregados e Selic") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
kable(TabelaPIB, format = "html", booktabs = TRUE, caption = "Valores do PIB") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
library(htmltools)
library(GetBCBData)
library(dplyr)
library(pandoc)
library(ggplot2)
library(tibble)
library(tidyr)
library(kableExtra)
library(flextable)
library(openxlsx)
library(scales)
library(reshape2)
library(patchwork)
library(corrplot)
##Pegando os dados necessários pelo ID
#reservas bancárias =/ Encaixes Totais
TabelaResBan <- GetBCBData::gbcbd_get_series(
id =  1787,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#Papel Moeda no Poder Público
TabelaPMPP <- GetBCBData::gbcbd_get_series(
id = 27789 ,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#Base monetária
TabelaBASE <- GetBCBData::gbcbd_get_series(
id =  1788,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#Depósitos à vista
TabelaDepAvi <- GetBCBData::gbcbd_get_series(
id =  27790,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#Meios de pagamento = PMPP + DV (TOTAL DE M1)
TabelaMP <- GetBCBData::gbcbd_get_series(
id = 27791,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#M1
TabelaM1 <- GetBCBData::gbcbd_get_series(
id = 27791,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#M2
TabelaM2 <- GetBCBData::gbcbd_get_series(
id = 27810,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#M3
TabelaM3 <- GetBCBData::gbcbd_get_series(
id = 27813,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#M4
TabelaM4 <- GetBCBData::gbcbd_get_series(
id = 27815,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#IPCA
TabelaIPCA <- GetBCBData::gbcbd_get_series(
id = 433,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#Taxa Selic
TabelaSELIC <- GetBCBData::gbcbd_get_series(
id = 4189,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#Puxando a Tabela de PIB e tratando-a
dados_pib <- read.xlsx("C:/Users/Lorenzo Costa/Desktop/Trabalhos/Economia Monetária/multiplicadorpt2/tabelaPIB.xlsx", sheet = "Tabela")
anos <- seq(2003,2021, by = 1)
print(anos, max.print = Inf)
vetorPIB <- as.numeric(dados_pib[4, -1])
print(vetorPIB, max.print = Inf)
vetor_PIB <-format(vetorPIB, big.mark = ".", decimal.mark = ",", scientific = FALSE)
TabelaPIB <- tibble(Data = anos, "PIB valores correntes(milhões)" = vetor_PIB)
TabelaPIB$`PIB valores correntes(milhões)` <- as.numeric(gsub("\\.", "", TabelaPIB$`PIB valores correntes(milhões)`))
diffPIB <- diff(TabelaPIB$`PIB valores correntes(milhões)`)
porcentoPIB <- (diffPIB / head(TabelaPIB$`PIB valores correntes(milhões)`, -1)) * 100
PIBvari <- c(NA, porcentoPIB)
TabelaPIB <- TabelaPIB %>%
add_column(variação = PIBvari, .after = "PIB valores correntes(milhões)")
#Repetir para que o PIB volte a ser numérico novamente
TabelaPIB <- tibble(Data = anos, "PIB valores correntes(milhões)" = vetor_PIB)
### Criando um vetor para ser a coluna de tempo
dates <- seq.Date(from = as.Date("2003-01-01"), to = as.Date("2023-12-01"), by = "month")
#criando vetores das tabelas (não terá o vetor PIB - ja foi criado anteriormente)
vetormp <- TabelaMP[[2]]
vetordepavi <- TabelaDepAvi[[2]]
vetorresban <- TabelaResBan[[2]]
vetorPPMP <- TabelaPMPP[[2]]
vetorBASE <- TabelaBASE[[2]]
vetorM1 <- TabelaM1[[2]]
vetorM2 <- TabelaM2[[2]]
vetorM3 <- TabelaM3[[2]]
vetorM4 <- TabelaM4[[2]]
vetorIPCA <- TabelaIPCA[[2]]
vetorSELIC <- TabelaSELIC[[2]]
#formatando os vetores
vetor_mp <- format(vetormp, big.mark = ".", decimal.mark = ",", scientific = FALSE)
vetor_depavi <- format(vetordepavi, big.mark = ".", decimal.mark = ",", scientific = FALSE)
vetor_resban <- format(vetorresban, big.mark = ".", decimal.mark = ",", scientific = FALSE)
vetor_PPMP <- format(vetorPPMP, big.mark = ".", decimal.mark = ",", scientific = FALSE)
vetor_BASE <- format(vetorBASE, big.mark = ".", decimal.mark = ",", scientific = FALSE)
vetor_M1 <- format(vetorM1, big.mark = ".", decimal.mark = ",", scientific = FALSE)
vetor_M2 <- format(vetorM2, big.mark = ".", decimal.mark = ",", scientific = FALSE)
vetor_M3 <- format(vetorM3, big.mark = ".", decimal.mark = ",", scientific = FALSE)
vetor_M4 <- format(vetorM4, big.mark = ".", decimal.mark = ",", scientific = FALSE)
#criação das séries temporais
###SABEMOS QUE B = PMPP + ENCAIXES TOTAIS / LOGO ENCAIXES TOTAIS = B - PMPP
#Função de subtração
Z <- function(s, t){
Resultado = s - t
return(Resultado)
}
#criando um vetor com os encaixes técnicos
VetorEncaixe <- mapply(Z, TabelaBASE[[2]], TabelaPMPP[[2]])
#Tabela do vetor de encaxe
TabelaEncaixe <- tibble(Data = dates, Valor = VetorEncaixe)
#Formatando o vetor_encaixe
Vetor_Encaixe <- format(VetorEncaixe, big.mark = ".", decimal.mark = ",", scientific = FALSE)
### juntando todas os dados monetários em uma tabela só
TabelaCoeficientes <- tibble(Data = dates, "Meios de Pagamentos" = vetor_mp,
"Depositos a vista" = vetor_depavi, "Encaixes Totais" = Vetor_Encaixe)
# Criando função para realizar o cálculo do coeficiente
X <- function(x,y){
Resultado = x/y
return(Resultado)
}
#Fazendo os cálculos do coeficiente "e" e "d" entre colunas de dois dataframes diferentes.
Coeficiente_e <- mapply(X, TabelaEncaixe[[2]], TabelaDepAvi[[2]])
Coeficiente_d <- mapply(X, TabelaDepAvi[,2], TabelaMP[,2])
# Criando dois tibbles para as séries temporais de "e" e "d"
SerieTemporal_e <- tibble(data = dates, valor = Coeficiente_e)
SerieTemporal_d <- tibble(data = dates, valor = Coeficiente_d)
#Criando a função de multiplicador monetário
y <- function(d,e){
Resultado = 1/(1-d * (1-e))
return(Resultado)
}
# Criando uma tible com todos os 2 coeficientes
Coeficientes <- tibble(data = dates, Valor_de_e = Coeficiente_e, Valor_de_d = Coeficiente_d)
# Fazendo o cálculo do multiplicador bancário entre colunas de dois dataframes e fazendo o gráfico dele.
Multiplicador_mon <- mapply(y, Coeficientes[,3], Coeficientes[,2])
SerieTemporal_alpha <- tibble(data = dates, valor = Multiplicador_mon)
# Adicionando colunas a uma tabela com TODOS os coeficientes.
TabelaCoeficientes <- TabelaCoeficientes %>%
add_column(e = Coeficiente_e, d = Coeficiente_d, alpha = Multiplicador_mon, .after = "Encaixes Totais", .name_repair = "unique")
kable(TabelaCoeficientes, format = "html", longtable = TRUE, booktabs = TRUE, caption = "Valores dos Coeficientes no Tempo") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
#Criando a tibble dos Agregados Monetários, IPCA e PIB, mas só futuramente será exibida no arquivo html
TabelaAgregados <- tibble( Data = dates, "M1" = vetor_M1, "M2" = vetor_M2, "M3" = vetor_M3,
"M4" = vetor_M4,"IPCA" = vetorIPCA, "SELIC" = vetorSELIC)
#Transformando (retomando) os restantes das colunas em variáveis numéricas (fazer isso após a exibição da tabela em html)
#Só é possível utilizar o summary e o sapply em variáveis numéricas.
TabelaCoeficientes$`Meios de Pagamentos` <- as.numeric(gsub("\\.", "", TabelaCoeficientes$`Meios de Pagamentos`))
TabelaCoeficientes$`Depositos a vista` <- as.numeric(gsub("\\.", "", TabelaCoeficientes$`Depositos a vista`))
TabelaCoeficientes$`Encaixes Totais` <- as.numeric(gsub("\\.", "", TabelaCoeficientes$`Encaixes Totais`))
###Criação das estatísticas TabelaCoeficientes
#summary(TabelaCoeficientes)
#sapply(TabelaCoeficientes, sd)
vetorestat <- c("Max", "Min", "Mean", "sd")
estatMP <- c("653.420.212", "86.231.763", "311.848.406", "160.128.500")
estatDP <- c("367.475.256", "53.712.908", "167.699.479", "81.515.370")
estatET <- c("146.023.783", "23.635.669", "75.386.077", "29.872.300")
estatE <- c("0.6510", "0.3354", "0.4659", "0.05429921")
estatD <- c("0.6508", "0.4640", "0.5556", "0.05787693")
estatalpha <- c("1.6045311", "1.2424243", "1.4262363", " 0.08183064")
TabelaEstatCoe <- tibble(Estatística = vetorestat, "Meios de Pagamentos" = estatMP, "Depositos a vista" = estatDP,
"Encaixes Totais" = estatET, "e" = estatE, "d" = estatD, "alpha" = estatalpha)
kable(TabelaEstatCoe, format = "html", booktabs = TRUE) %>%
kable_styling(bootstrap_options = c( "hover", "condensed", "responsive"))
kable(TabelaAgregados, format = "html", longtable = TRUE, booktabs = TRUE, caption = "Valores dos Agregados e Selic") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
kable(TabelaPIB, format = "html", booktabs = TRUE, caption = "Valores do PIB") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
#str(TabelaAgregados$M1)
#sapply(TabelaAgregados, class)
# retirando os "." para milhares e reformatando para voltarem a ser variáveis numéricas. IPCA e SELIC já vieram com
#separadores de decimais e já são consideradas numerics naturalmente, então não precisa.
TabelaAgregados$M1 <- as.numeric(gsub("\\.", "", TabelaAgregados$M1))
TabelaAgregados$M2 <- as.numeric(gsub("\\.", "", TabelaAgregados$M2))
TabelaAgregados$M3 <- as.numeric(gsub("\\.", "", TabelaAgregados$M3))
TabelaAgregados$M4 <- as.numeric(gsub("\\.", "", TabelaAgregados$M4))
TabelaPIB$`PIB valores correntes(milhões)` <- as.numeric(gsub("\\.", "", TabelaPIB$`PIB valores correntes(milhões)`))
#
#Criação das variações no tempo
diffM1 <- diff(TabelaAgregados$M1)
percentoM1 <- (diffM1 / head(TabelaAgregados$M1, -1)) * 100
M1vari <- c(NA, percentoM1)
diffM2 <- diff(TabelaAgregados$M2)
percentoM2 <- (diffM2 / head(TabelaAgregados$M2, -1)) * 100
M2vari <- c(NA, percentoM2)
diffM3 <- diff(TabelaAgregados$M3)
percentoM3 <- (diffM3 / head(TabelaAgregados$M3, -1)) * 100
M3vari <- c(NA, percentoM3)
diffM4 <- diff(TabelaAgregados$M4)
percentoM4 <- (diffM4 / head(TabelaAgregados$M4, -1)) * 100
M4vari <- c(NA, percentoM4)
diffIPCA <- diff(TabelaAgregados$IPCA)
percentoIPCA <- (diffIPCA / head(TabelaAgregados$IPCA, -1)) * 100
IPCAvari <- c(NA, percentoIPCA)
diffSELIC <- diff(TabelaAgregados$SELIC)
percentoSELIC <- (diffSELIC / head(TabelaAgregados$SELIC, -1)) * 100
SELICvari <- c(NA, percentoSELIC)
VariacoesPercentuais <- tibble(Data = dates, M1 = M1vari, M2 = M2vari, M3 = M3vari, M4 = M4vari,
IPCA = IPCAvari, SELIC = SELICvari)
kable(VariacoesPercentuais, format = "html", booktabs = TRUE) %>%
kable_styling(bootstrap_options = c( "hover", "condensed", "stripped"))
#TabelaAgregados$SELIC <- as.numeric(sub(",", ".", gsub("\\.", "", TabelaAgregados$SELIC), fixed = TRUE))
#
#Criando a Tabela de estatística para A TabelaAgregados, que já são numéricos. (só é possível tirar essa estatística de valores numéricos)
#summary(TabelaAgregados)
#sapply(TabelaAgregados, sd)
#summary(TabelaPIB)
#sapply(TabelaPIB, sd)
estatM1 <- c("653.420.212", "86.231.763", "311.848.406", "160.128.500")
estatM2 <- c("5.913.000.000", "385.500.000", "2.066.000.000", "1.407.171.000")
estatM3 <- c("10.860.000.000", "696.100.000", "4.239.000.000", "2.822.259.000")
estatM4 <- c("11.950.000.000", "810.300.000", "4.616.000.000", "3.046.371.000")
estatPIB <- c("9.012.142", "1.717.950", "4.814.316", "2.182.850")
TabelaEstatAg <- tibble(Estatística = vetorestat, M1 = estatM1, M2 = estatM2, M3 = estatM3, M4 = estatM4,
PIB = estatPIB)
kable(TabelaEstatAg, format = "html", longtable = TRUE, booktabs = TRUE) %>%
kable_styling(bootstrap_options = c( "stripped", "hover", "condensed"))
max(VariacoesPercentuais$M1)
max(VariacoesPercentuais$M2)
max(VariacoesPercentuais$M3)
max(VariacoesPercentuais$M4)
max(TabelaPIB$`PIB valores correntes(milhões)`)
##Pegando os dados necessários pelo ID
#reservas bancárias =/ Encaixes Totais
TabelaResBan <- GetBCBData::gbcbd_get_series(
id =  1787,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#Papel Moeda no Poder Público
TabelaPMPP <- GetBCBData::gbcbd_get_series(
id = 27789 ,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#Base monetária
TabelaBASE <- GetBCBData::gbcbd_get_series(
id =  1788,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#Depósitos à vista
TabelaDepAvi <- GetBCBData::gbcbd_get_series(
id =  27790,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#Meios de pagamento = PMPP + DV (TOTAL DE M1)
TabelaMP <- GetBCBData::gbcbd_get_series(
id = 27791,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#M1
TabelaM1 <- GetBCBData::gbcbd_get_series(
id = 27791,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#M2
TabelaM2 <- GetBCBData::gbcbd_get_series(
id = 27810,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#M3
TabelaM3 <- GetBCBData::gbcbd_get_series(
id = 27813,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#M4
TabelaM4 <- GetBCBData::gbcbd_get_series(
id = 27815,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#IPCA
TabelaIPCA <- GetBCBData::gbcbd_get_series(
id = 433,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#Taxa Selic
TabelaSELIC <- GetBCBData::gbcbd_get_series(
id = 4189,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#Puxando a Tabela de PIB e tratando-a
dados_pib <- read.xlsx("C:/Users/Lorenzo Costa/Desktop/Trabalhos/Economia Monetária/multiplicadorpt2/tabelaPIB.xlsx", sheet = "Tabela")
anos <- seq(2003,2021, by = 1)
print(anos, max.print = Inf)
vetorPIB <- as.numeric(dados_pib[4, -1])
print(vetorPIB, max.print = Inf)
vetor_PIB <-format(vetorPIB, big.mark = ".", decimal.mark = ",", scientific = FALSE)
TabelaPIB <- tibble(Data = anos, "PIB valores correntes(milhões)" = vetor_PIB)
TabelaPIB$`PIB valores correntes(milhões)` <- as.numeric(gsub("\\.", "", TabelaPIB$`PIB valores correntes(milhões)`))
diffPIB <- diff(TabelaPIB$`PIB valores correntes(milhões)`)
porcentoPIB <- (diffPIB / head(TabelaPIB$`PIB valores correntes(milhões)`, -1)) * 100
PIBvari <- c(NA, porcentoPIB)
TabelaPIB <- TabelaPIB %>%
add_column("Variação Percentual" = PIBvari, .after = "PIB valores correntes(milhões)")
#Repetir para que o PIB volte a ser numérico novamente
max(TabelaPIB$`Variação Percentual`)
max(VariacoesPercentuais$M1, na.rm = TRUE)
max(VariacoesPercentuais$M2, na.rm = TRUE)
max(VariacoesPercentuais$M3, na.rm = TRUE)
max(VariacoesPercentuais$M4, na.rm = TRUE)
max(TabelaPIB$`Variação Percentual`, na.rm = TRUE)
#Criando a tibble dos Agregados Monetários, IPCA e PIB, mas só futuramente será exibida no arquivo html
TabelaAgregados <- tibble( Data = dates, "M1" = vetor_M1, "M2" = vetor_M2, "M3" = vetor_M3,
"M4" = vetor_M4,"IPCA" = vetorIPCA, "SELIC" = vetorSELIC)
#Transformando (retomando) os restantes das colunas em variáveis numéricas (fazer isso após a exibição da tabela em html)
#Só é possível utilizar o summary e o sapply em variáveis numéricas.
TabelaCoeficientes$`Meios de Pagamentos` <- as.numeric(gsub("\\.", "", TabelaCoeficientes$`Meios de Pagamentos`))
TabelaCoeficientes$`Depositos a vista` <- as.numeric(gsub("\\.", "", TabelaCoeficientes$`Depositos a vista`))
TabelaCoeficientes$`Encaixes Totais` <- as.numeric(gsub("\\.", "", TabelaCoeficientes$`Encaixes Totais`))
###Criação das estatísticas TabelaCoeficientes
#summary(TabelaCoeficientes)
#sapply(TabelaCoeficientes, sd)
vetorestat <- c("Max", "Min", "Mean", "sd")
vetorestatVARI <- c("Max", "Min", "sd", "highest variance", "lowest variance"))
#Criando a tibble dos Agregados Monetários, IPCA e PIB, mas só futuramente será exibida no arquivo html
TabelaAgregados <- tibble( Data = dates, "M1" = vetor_M1, "M2" = vetor_M2, "M3" = vetor_M3,
"M4" = vetor_M4,"IPCA" = vetorIPCA, "SELIC" = vetorSELIC)
#Transformando (retomando) os restantes das colunas em variáveis numéricas (fazer isso após a exibição da tabela em html)
#Só é possível utilizar o summary e o sapply em variáveis numéricas.
TabelaCoeficientes$`Meios de Pagamentos` <- as.numeric(gsub("\\.", "", TabelaCoeficientes$`Meios de Pagamentos`))
TabelaCoeficientes$`Depositos a vista` <- as.numeric(gsub("\\.", "", TabelaCoeficientes$`Depositos a vista`))
TabelaCoeficientes$`Encaixes Totais` <- as.numeric(gsub("\\.", "", TabelaCoeficientes$`Encaixes Totais`))
###Criação das estatísticas TabelaCoeficientes
#summary(TabelaCoeficientes)
#sapply(TabelaCoeficientes, sd)
vetorestat <- c("Max", "Min", "Mean", "sd")
vetorestatVARI <- c("Max", "Min", "sd", "highest variance", "lowest variance"))
#Criando a tibble dos Agregados Monetários, IPCA e PIB, mas só futuramente será exibida no arquivo html
TabelaAgregados <- tibble( Data = dates, "M1" = vetor_M1, "M2" = vetor_M2, "M3" = vetor_M3,
"M4" = vetor_M4,"IPCA" = vetorIPCA, "SELIC" = vetorSELIC)
#Transformando (retomando) os restantes das colunas em variáveis numéricas (fazer isso após a exibição da tabela em html)
#Só é possível utilizar o summary e o sapply em variáveis numéricas.
TabelaCoeficientes$`Meios de Pagamentos` <- as.numeric(gsub("\\.", "", TabelaCoeficientes$`Meios de Pagamentos`))
TabelaCoeficientes$`Depositos a vista` <- as.numeric(gsub("\\.", "", TabelaCoeficientes$`Depositos a vista`))
TabelaCoeficientes$`Encaixes Totais` <- as.numeric(gsub("\\.", "", TabelaCoeficientes$`Encaixes Totais`))
###Criação das estatísticas TabelaCoeficientes
#summary(TabelaCoeficientes)
#sapply(TabelaCoeficientes, sd)
vetorestat <- c("Max", "Min", "Mean", "sd")
vetorestatVARI <- c("Max", "Min", "sd", "highest variance", "lowest variance")
estatMP <- c("653.420.212", "86.231.763", "311.848.406", "160.128.500")
estatDP <- c("367.475.256", "53.712.908", "167.699.479", "81.515.370")
estatET <- c("146.023.783", "23.635.669", "75.386.077", "29.872.300")
estatE <- c("0.6510", "0.3354", "0.4659", "0.05429921")
estatD <- c("0.6508", "0.4640", "0.5556", "0.05787693")
estatalpha <- c("1.6045311", "1.2424243", "1.4262363", " 0.08183064")
TabelaEstatCoe <- tibble(Estatística = vetorestat, "Meios de Pagamentos" = estatMP, "Depositos a vista" = estatDP,
"Encaixes Totais" = estatET, "e" = estatE, "d" = estatD, "alpha" = estatalpha)
kable(TabelaEstatCoe, format = "html", booktabs = TRUE) %>%
kable_styling(bootstrap_options = c( "hover", "condensed", "responsive"))
#Criando a tibble dos Agregados Monetários, IPCA e PIB, mas só futuramente será exibida no arquivo html
TabelaAgregados <- tibble( Data = dates, "M1" = vetor_M1, "M2" = vetor_M2, "M3" = vetor_M3,
"M4" = vetor_M4,"IPCA" = vetorIPCA, "SELIC" = vetorSELIC)
#Transformando (retomando) os restantes das colunas em variáveis numéricas (fazer isso após a exibição da tabela em html)
#Só é possível utilizar o summary e o sapply em variáveis numéricas.
TabelaCoeficientes$`Meios de Pagamentos` <- as.numeric(gsub("\\.", "", TabelaCoeficientes$`Meios de Pagamentos`))
TabelaCoeficientes$`Depositos a vista` <- as.numeric(gsub("\\.", "", TabelaCoeficientes$`Depositos a vista`))
TabelaCoeficientes$`Encaixes Totais` <- as.numeric(gsub("\\.", "", TabelaCoeficientes$`Encaixes Totais`))
###Criação das estatísticas TabelaCoeficientes
#summary(TabelaCoeficientes)
#sapply(TabelaCoeficientes, sd)
vetorestat <- c("Max", "Min", "Mean", "sd")
vetorestatVARI <- c("Max", "Min", "Mean", "sd", "Highest Variance", "Lowest Variance")
estatMP <- c("653.420.212", "86.231.763", "311.848.406", "160.128.500")
estatDP <- c("367.475.256", "53.712.908", "167.699.479", "81.515.370")
estatET <- c("146.023.783", "23.635.669", "75.386.077", "29.872.300")
estatE <- c("0.6510", "0.3354", "0.4659", "0.05429921")
estatD <- c("0.6508", "0.4640", "0.5556", "0.05787693")
estatalpha <- c("1.6045311", "1.2424243", "1.4262363", " 0.08183064")
TabelaEstatCoe <- tibble(Estatística = vetorestat, "Meios de Pagamentos" = estatMP, "Depositos a vista" = estatDP,
"Encaixes Totais" = estatET, "e" = estatE, "d" = estatD, "alpha" = estatalpha)
kable(TabelaEstatCoe, format = "html", booktabs = TRUE) %>%
kable_styling(bootstrap_options = c( "hover", "condensed", "responsive"))
#TabelaAgregados$SELIC <- as.numeric(sub(",", ".", gsub("\\.", "", TabelaAgregados$SELIC), fixed = TRUE))
#
#Criando a Tabela de estatística para A TabelaAgregados, que já são numéricos. (só é possível tirar essa estatística de valores numéricos)
#summary(TabelaAgregados)
#sapply(TabelaAgregados, sd)
#summary(TabelaPIB)
#sapply(TabelaPIB, sd)
#max(VariacoesPercentuais$M1, na.rm = TRUE)
#max(VariacoesPercentuais$M2, na.rm = TRUE)
#max(VariacoesPercentuais$M3, na.rm = TRUE)
#max(VariacoesPercentuais$M4, na.rm = TRUE)
#max(TabelaPIB$`Variação Percentual`, na.rm = TRUE)
estatM1 <- c("653.420.212", "86.231.763", "311.848.406", "160.128.500", "22.8769" )
estatM2 <- c("5.913.000.000", "385.500.000", "2.066.000.000", "1.407.171.000", "6.3643")
estatM3 <- c("10.860.000.000", "696.100.000", "4.239.000.000", "2.822.259.000", "5.734189")
estatM4 <- c("11.950.000.000", "810.300.000", "4.616.000.000", "3.046.371.000", " 4.491462")
estatPIB <- c("9.012.142", "1.717.950", "4.814.316", "2.182.850", "18.43127")
TabelaEstatAg <- tibble(Estatística = vetorestatVARI, M1 = estatM1, M2 = estatM2, M3 = estatM3, M4 = estatM4,
PIB = estatPIB)
min(VariacoesPercentuais$M1, na.rm = TRUE)
min(VariacoesPercentuais$M2, na.rm = TRUE)
min(VariacoesPercentuais$M3, na.rm = TRUE)
min(VariacoesPercentuais$M4, na.rm = TRUE)
min(TabelaPIB$`Variação Percentual`, na.rm = TRUE)
View(VariacoesPercentuais)
View(TabelaAgregados)
View(TabelaPIB)
View(VariacoesPercentuais)
