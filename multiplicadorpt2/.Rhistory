#Formatando o vetor_encaixe
Vetor_Encaixe <- format(VetorEncaixe, big.mark = ".", decimal.mark = ",", scientific = FALSE)
### juntando todas os dados monetários em uma tabela só
TabelaCoeficientes <- tibble(Data = dates, "Meios de Pagamentos" = vetor_mp,
"Depositos a vista" = vetor_depavi, "Encaixes Totais" = Vetor_Encaixe)
# Criando função para realizar o cálculo do coeficiente
X <- function(x,y){
Resultado = x/y
return(Resultado)
}
#Fazendo os cálculos do coeficiente "e" e "d" entre colunas de dois dataframes diferentes.
Coeficiente_e <- mapply(X, TabelaEncaixe[[2]], TabelaDepAvi[[2]])
Coeficiente_d <- mapply(X, TabelaDepAvi[,2], TabelaMP[,2])
# Criando dois tibbles para as séries temporais de "e" e "d"
SerieTemporal_e <- tibble(data = dates, valor = Coeficiente_e)
SerieTemporal_d <- tibble(data = dates, valor = Coeficiente_d)
#Criando a função de multiplicador monetário
y <- function(d,e){
Resultado = 1/(1-d * (1-e))
return(Resultado)
}
# Criando uma tible com todos os 2 coeficientes
Coeficientes <- tibble(data = dates, Valor_de_e = Coeficiente_e, Valor_de_d = Coeficiente_d)
# Fazendo o cálculo do multiplicador bancário entre colunas de dois dataframes e fazendo o gráfico dele.
Multiplicador_mon <- mapply(y, Coeficientes[,3], Coeficientes[,2])
SerieTemporal_alpha <- tibble(data = dates, valor = Multiplicador_mon)
# Adicionando colunas a uma tabela com TODOS os coeficientes.
TabelaCoeficientes <- TabelaCoeficientes %>%
add_column(e = Coeficiente_e, d = Coeficiente_d, alpha = Multiplicador_mon, .after = "Encaixes Totais", .name_repair = "unique")
kable(TabelaCoeficientes, format = "html", longtable = TRUE, booktabs = TRUE, caption = "Valores dos Coeficientes no Tempo") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
#Criando a tibble dos Agregados Monetários, IPCA e PIB, mas só futuramente será exibida no arquivo html
TabelaAgregados <- tibble( Data = dates, "M1" = vetor_M1, "M2" = vetor_M2, "M3" = vetor_M3,
"M4" = vetor_M4,"IPCA" = vetor_IPCA, "SELIC" = vetor_SELIC, "PIB R$ (milhões)" = vetor_PIB)
#Transformando os restantes das colunas em variáveis numéricas (fazer isso após a exibição da tabela em html)
TabelaCoeficientes$`Meios de Pagamentos` <- as.numeric(gsub("\\.", "", TabelaCoeficientes$`Meios de Pagamentos`))
TabelaCoeficientes$`Depositos a vista` <- as.numeric(gsub("\\.", "", TabelaCoeficientes$`Depositos a vista`))
TabelaCoeficientes$`Encaixes Totais` <- as.numeric(gsub("\\.", "", TabelaCoeficientes$`Encaixes Totais`))
###Criação das estatísticas TabelaCoeficientes
#summary(TabelaCoeficientes)
#sapply(TabelaCoeficientes, sd)
vetorestat <- c("Max", "Min", "Mean", "sd")
estatMP <- c("653.420.212", "86.231.763", "311.848.406", "160.128.500")
estatDP <- c("367.475.256", "53.712.908", "167.699.479", "81.515.370")
estatET <- c("146.023.783", "23.635.669", "75.386.077", "29.872.300")
estatE <- c("0.6510", "0.3354", "0.4659", "0.05429921")
estatD <- c("0.6508", "0.4640", "0.5556", "0.05787693")
estatalpha <- c("1.6045311", "1.2424243", "1.4262363", " 0.08183064")
TabelaEstatCoe <- tibble(Estatística = vetorestat, "Meios de Pagamentos" = estatMP, "Depositos a vista" = estatDP,
"Encaixes Totais" = estatET, "e" = estatE, "d" = estatD, "alpha" = estatalpha)
kable(TabelaEstatCoe, format = "html", booktabs = TRUE, caption = "Tabela dos Dados Estatisticos") %>%
kable_styling(bootstrap_options = c( "hover", "condensed", "responsive"))
View(TabelaAgregados)
sapply(TabelaAgregados, class)
#Criando a tibble dos Agregados Monetários, IPCA e PIB, mas só futuramente será exibida no arquivo html
TabelaAgregados <- tibble( Data = dates, "M1" = vetor_M1, "M2" = vetor_M2, "M3" = vetor_M3,
"M4" = vetor_M4,"IPCA" = vetor_IPCA, "SELIC" = vetor_SELIC, "PIB R$ (milhões)" = vetor_PIB)
#Transformando os restantes das colunas em variáveis numéricas (fazer isso após a exibição da tabela em html)
TabelaCoeficientes$`Meios de Pagamentos` <- as.numeric(gsub("\\.", "", TabelaCoeficientes$`Meios de Pagamentos`))
TabelaCoeficientes$`Depositos a vista` <- as.numeric(gsub("\\.", "", TabelaCoeficientes$`Depositos a vista`))
TabelaCoeficientes$`Encaixes Totais` <- as.numeric(gsub("\\.", "", TabelaCoeficientes$`Encaixes Totais`))
###Criação das estatísticas TabelaCoeficientes
#summary(TabelaCoeficientes)
#sapply(TabelaCoeficientes, sd)
vetorestat <- c("Max", "Min", "Mean", "sd")
estatMP <- c("653.420.212", "86.231.763", "311.848.406", "160.128.500")
estatDP <- c("367.475.256", "53.712.908", "167.699.479", "81.515.370")
estatET <- c("146.023.783", "23.635.669", "75.386.077", "29.872.300")
estatE <- c("0.6510", "0.3354", "0.4659", "0.05429921")
estatD <- c("0.6508", "0.4640", "0.5556", "0.05787693")
estatalpha <- c("1.6045311", "1.2424243", "1.4262363", " 0.08183064")
TabelaEstatCoe <- tibble(Estatística = vetorestat, "Meios de Pagamentos" = estatMP, "Depositos a vista" = estatDP,
"Encaixes Totais" = estatET, "e" = estatE, "d" = estatD, "alpha" = estatalpha)
kable(TabelaEstatCoe, format = "html", booktabs = TRUE, caption = "Tabela dos Dados Estatisticos") %>%
kable_styling(bootstrap_options = c( "hover", "condensed", "responsive"))
library(GetBCBData)
library(dplyr)
library(pandoc)
library(ggplot2)
library(tibble)
library(tidyr)
library(kableExtra)
library(flextable)
library(openxlsx)
library(scales)
library(reshape2)
library(patchwork)
##Pegando os dados necessários pelo ID
#reservas bancárias =/ Encaixes Totais
TabelaResBan <- GetBCBData::gbcbd_get_series(
id =  1787,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#Papel Moeda no Poder Público
TabelaPMPP <- GetBCBData::gbcbd_get_series(
id = 27789 ,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#Base monetária
TabelaBASE <- GetBCBData::gbcbd_get_series(
id =  1788,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#Depósitos à vista
TabelaDepAvi <- GetBCBData::gbcbd_get_series(
id =  27790,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#Meios de pagamento = PMPP + DV (TOTAL DE M1)
TabelaMP <- GetBCBData::gbcbd_get_series(
id = 27791,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#M1
TabelaM1 <- GetBCBData::gbcbd_get_series(
id = 27791,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#M2
TabelaM2 <- GetBCBData::gbcbd_get_series(
id = 27810,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#M3
TabelaM3 <- GetBCBData::gbcbd_get_series(
id = 27813,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#M4
TabelaM4 <- GetBCBData::gbcbd_get_series(
id = 27815,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#IPCA
TabelaIPCA <- GetBCBData::gbcbd_get_series(
id = 433,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#Taxa Selic
TabelaSELIC <- GetBCBData::gbcbd_get_series(
id = 4189,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
#PIB mensal a preços correntes
TabelaPIB <- GetBCBData::gbcbd_get_series(
id = 4380,
first.date = "2003-01-01",
last.date = "2023-12-01"
)
View(TabelaSELIC)
View(TabelaPIB)
#criação das séries temporais
###SABEMOS QUE B = PMPP + ENCAIXES TOTAIS / LOGO ENCAIXES TOTAIS = B - PMPP
#Função de subtração
Z <- function(s, t){
Resultado = s - t
return(Resultado)
}
#criando um vetor com os encaixes técnicos
VetorEncaixe <- mapply(Z, TabelaBASE[[2]], TabelaPMPP[[2]])
#Tabela do vetor de encaxe
TabelaEncaixe <- tibble(Data = dates, Valor = VetorEncaixe)
### Criando um vetor para ser a coluna de tempo
dates <- seq.Date(from = as.Date("2003-01-01"), to = as.Date("2023-12-01"), by = "month")
#criando vetores das tabelas
vetormp <- TabelaMP[[2]]
vetordepavi <- TabelaDepAvi[[2]]
vetorresban <- TabelaResBan[[2]]
vetorPPMP <- TabelaPMPP[[2]]
vetorBASE <- TabelaBASE[[2]]
vetorM1 <- TabelaM1[[2]]
vetorM2 <- TabelaM2[[2]]
vetorM3 <- TabelaM3[[2]]
vetorM4 <- TabelaM4[[2]]
vetorIPCA <- TabelaIPCA[[2]]
vetorPIB <- TabelaPIB[[2]]
vetorSELIC <- TabelaSELIC[[2]]
#formatando os vetores
vetor_mp <- format(vetormp, big.mark = ".", decimal.mark = ",", scientific = FALSE)
vetor_depavi <- format(vetordepavi, big.mark = ".", decimal.mark = ",", scientific = FALSE)
vetor_resban <- format(vetorresban, big.mark = ".", decimal.mark = ",", scientific = FALSE)
vetor_PPMP <- format(vetorPPMP, big.mark = ".", decimal.mark = ",", scientific = FALSE)
vetor_BASE <- format(vetorBASE, big.mark = ".", decimal.mark = ",", scientific = FALSE)
vetor_M1 <- format(vetorM1, big.mark = ".", decimal.mark = ",", scientific = FALSE)
vetor_M2 <- format(vetorM2, big.mark = ".", decimal.mark = ",", scientific = FALSE)
vetor_M3 <- format(vetorM3, big.mark = ".", decimal.mark = ",", scientific = FALSE)
vetor_M4 <- format(vetorM4, big.mark = ".", decimal.mark = ",", scientific = FALSE)
vetor_PIB <-format(vetorPIB, big.mark = ".", decimal.mark = ",", scientific = FALSE)
#criação das séries temporais
###SABEMOS QUE B = PMPP + ENCAIXES TOTAIS / LOGO ENCAIXES TOTAIS = B - PMPP
#Função de subtração
Z <- function(s, t){
Resultado = s - t
return(Resultado)
}
#criando um vetor com os encaixes técnicos
VetorEncaixe <- mapply(Z, TabelaBASE[[2]], TabelaPMPP[[2]])
#Tabela do vetor de encaxe
TabelaEncaixe <- tibble(Data = dates, Valor = VetorEncaixe)
#Formatando o vetor_encaixe
Vetor_Encaixe <- format(VetorEncaixe, big.mark = ".", decimal.mark = ",", scientific = FALSE)
### juntando todas os dados monetários em uma tabela só
TabelaCoeficientes <- tibble(Data = dates, "Meios de Pagamentos" = vetor_mp,
"Depositos a vista" = vetor_depavi, "Encaixes Totais" = Vetor_Encaixe)
# Criando função para realizar o cálculo do coeficiente
X <- function(x,y){
Resultado = x/y
return(Resultado)
}
#Fazendo os cálculos do coeficiente "e" e "d" entre colunas de dois dataframes diferentes.
Coeficiente_e <- mapply(X, TabelaEncaixe[[2]], TabelaDepAvi[[2]])
Coeficiente_d <- mapply(X, TabelaDepAvi[,2], TabelaMP[,2])
# Criando dois tibbles para as séries temporais de "e" e "d"
SerieTemporal_e <- tibble(data = dates, valor = Coeficiente_e)
SerieTemporal_d <- tibble(data = dates, valor = Coeficiente_d)
#Criando a função de multiplicador monetário
y <- function(d,e){
Resultado = 1/(1-d * (1-e))
return(Resultado)
}
# Criando uma tible com todos os 2 coeficientes
Coeficientes <- tibble(data = dates, Valor_de_e = Coeficiente_e, Valor_de_d = Coeficiente_d)
# Fazendo o cálculo do multiplicador bancário entre colunas de dois dataframes e fazendo o gráfico dele.
Multiplicador_mon <- mapply(y, Coeficientes[,3], Coeficientes[,2])
SerieTemporal_alpha <- tibble(data = dates, valor = Multiplicador_mon)
# Adicionando colunas a uma tabela com TODOS os coeficientes.
TabelaCoeficientes <- TabelaCoeficientes %>%
add_column(e = Coeficiente_e, d = Coeficiente_d, alpha = Multiplicador_mon, .after = "Encaixes Totais", .name_repair = "unique")
kable(TabelaCoeficientes, format = "html", longtable = TRUE, booktabs = TRUE, caption = "Valores dos Coeficientes no Tempo") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
#Criando a tibble dos Agregados Monetários, IPCA e PIB, mas só futuramente será exibida no arquivo html
TabelaAgregados <- tibble( Data = dates, "M1" = vetor_M1, "M2" = vetor_M2, "M3" = vetor_M3,
"M4" = vetor_M4,"IPCA" = vetor_IPCA, "SELIC" = vetor_SELIC, "PIB R$ (milhões)" = vetor_PIB)
#Criando a tibble dos Agregados Monetários, IPCA e PIB, mas só futuramente será exibida no arquivo html
TabelaAgregados <- tibble( Data = dates, "M1" = vetor_M1, "M2" = vetor_M2, "M3" = vetor_M3,
"M4" = vetor_M4,"IPCA" = vetorIPCA, "SELIC" = vetorSELIC, "PIB R$ (milhões)" = vetor_PIB)
#Transformando os restantes das colunas em variáveis numéricas (fazer isso após a exibição da tabela em html)
TabelaCoeficientes$`Meios de Pagamentos` <- as.numeric(gsub("\\.", "", TabelaCoeficientes$`Meios de Pagamentos`))
TabelaCoeficientes$`Depositos a vista` <- as.numeric(gsub("\\.", "", TabelaCoeficientes$`Depositos a vista`))
TabelaCoeficientes$`Encaixes Totais` <- as.numeric(gsub("\\.", "", TabelaCoeficientes$`Encaixes Totais`))
###Criação das estatísticas TabelaCoeficientes
#summary(TabelaCoeficientes)
#sapply(TabelaCoeficientes, sd)
vetorestat <- c("Max", "Min", "Mean", "sd")
estatMP <- c("653.420.212", "86.231.763", "311.848.406", "160.128.500")
estatDP <- c("367.475.256", "53.712.908", "167.699.479", "81.515.370")
estatET <- c("146.023.783", "23.635.669", "75.386.077", "29.872.300")
estatE <- c("0.6510", "0.3354", "0.4659", "0.05429921")
estatD <- c("0.6508", "0.4640", "0.5556", "0.05787693")
estatalpha <- c("1.6045311", "1.2424243", "1.4262363", " 0.08183064")
TabelaEstatCoe <- tibble(Estatística = vetorestat, "Meios de Pagamentos" = estatMP, "Depositos a vista" = estatDP,
"Encaixes Totais" = estatET, "e" = estatE, "d" = estatD, "alpha" = estatalpha)
kable(TabelaEstatCoe, format = "html", booktabs = TRUE, caption = "Tabela dos Dados Estatisticos") %>%
kable_styling(bootstrap_options = c( "hover", "condensed", "responsive"))
kable(TabelaAgregados, format = "html", longtable = TRUE, booktabs = TRUE, caption = "Valores dos Agregados, Selic e do PIB") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
#Criando a tibble dos Agregados Monetários, IPCA e PIB, mas só futuramente será exibida no arquivo html
TabelaAgregados <- tibble( Data = dates, "M1" = vetor_M1, "M2" = vetor_M2, "M3" = vetor_M3,
"M4" = vetor_M4,"IPCA" = vetorIPCA, "SELIC" = vetorSELIC, "PIB R$ (milhões)" = vetor_PIB)
#Transformando os restantes das colunas em variáveis numéricas (fazer isso após a exibição da tabela em html)
TabelaCoeficientes$`Meios de Pagamentos` <- as.numeric(gsub("\\.", "", TabelaCoeficientes$`Meios de Pagamentos`))
TabelaCoeficientes$`Depositos a vista` <- as.numeric(gsub("\\.", "", TabelaCoeficientes$`Depositos a vista`))
TabelaCoeficientes$`Encaixes Totais` <- as.numeric(gsub("\\.", "", TabelaCoeficientes$`Encaixes Totais`))
###Criação das estatísticas TabelaCoeficientes
#summary(TabelaCoeficientes)
#sapply(TabelaCoeficientes, sd)
vetorestat <- c("Max", "Min", "Mean", "sd")
estatMP <- c("653.420.212", "86.231.763", "311.848.406", "160.128.500")
estatDP <- c("367.475.256", "53.712.908", "167.699.479", "81.515.370")
estatET <- c("146.023.783", "23.635.669", "75.386.077", "29.872.300")
estatE <- c("0.6510", "0.3354", "0.4659", "0.05429921")
estatD <- c("0.6508", "0.4640", "0.5556", "0.05787693")
estatalpha <- c("1.6045311", "1.2424243", "1.4262363", " 0.08183064")
TabelaEstatCoe <- tibble(Estatística = vetorestat, "Meios de Pagamentos" = estatMP, "Depositos a vista" = estatDP,
"Encaixes Totais" = estatET, "e" = estatE, "d" = estatD, "alpha" = estatalpha)
kable(TabelaEstatCoe, format = "html", booktabs = TRUE, caption = "Tabela dos Dados Estatisticos") %>%
kable_styling(bootstrap_options = c( "hover", "condensed", "responsive"))
ggplot(data = TabelaCoeficientes) +
aes(x = Data, y = e, color = "e") +
geom_line() +
geom_line(aes(y = d, color = "d")) +
geom_line(aes(y = alpha, color = "alpha")) +
labs(x = "Data", y = "Valores") +
scale_color_manual(values = c("e" = "red", "d" = "blue", "alpha" = "purple")) +
theme_minimal()
kable(TabelaAgregados, format = "html", longtable = TRUE, booktabs = TRUE, caption = "Valores dos Agregados, Selic e do PIB") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
sapply(TabelaAgregados, class)
View(TabelaEncaixe)
View(TabelaAgregados)
# criando diferentes ggplots para depois comnbiná-los com o patchwork
options(scipen = 0)
plot(TabelaAgregados$Data, TabelaAgregados$M1, type = "l",
col = "green", ylim = c(min(TabelaAgregados$M1),
max(TabelaAgregados$M1)),
ylab = "M1", xlab = "Data")
#str(TabelaAgregados$M1)
sapply(TabelaAgregados, class)
# retirando os "." para milhares e reformatando para voltarem a ser variáveis numéricas. IPCA e SELIC já vieram com
#separadores de decimais e já são consideradas numerics naturalmente, então não precisa.
TabelaAgregados$M1 <- as.numeric(gsub("\\.", "", TabelaAgregados$M1))
TabelaAgregados$M2 <- as.numeric(gsub("\\.", "", TabelaAgregados$M2))
TabelaAgregados$M3 <- as.numeric(gsub("\\.", "", TabelaAgregados$M3))
TabelaAgregados$M4 <- as.numeric(gsub("\\.", "", TabelaAgregados$M4))
#
#TabelaAgregados$SELIC <- as.numeric(sub(",", ".", gsub("\\.", "", TabelaAgregados$SELIC), fixed = TRUE))
#
#
#
# criando diferentes ggplots para depois comnbiná-los com o patchwork
options(scipen = 0)
plot(TabelaAgregados$Data, TabelaAgregados$M1, type = "l",
col = "green", ylim = c(min(TabelaAgregados$M1),
max(TabelaAgregados$M1)),
ylab = "M1", xlab = "Data")
par(new = TRUE)
plot(TabelaAgregados$Data, TabelaAgregados$SELIC, type = "l",
col = "cyan", axes = FALSE, xlab = "", ylab = "",
ylim = c(min(TabelaAgregados$SELIC),
max(TabelaAgregados$SELIC)))
# criando diferentes ggplots para depois comnbiná-los com o patchwork
options(scipen = 0)
#Criando uma gráfico plot com M1
plot(TabelaAgregados$Data, TabelaAgregados$M1, type = "l",
col = "green", ylim = c(min(TabelaAgregados$M1),
max(TabelaAgregados$M1)),
ylab = "M1", xlab = "Data")
#sobrepondo esse gráfico com outro plot para a taxa selic
par(new = TRUE)
plot(TabelaAgregados$Data, TabelaAgregados$SELIC, type = "l",
col = "cyan", axes = FALSE, xlab = "", ylab = "",
ylim = c(min(TabelaAgregados$SELIC),
max(TabelaAgregados$SELIC)))
#Criando um segundo eixo y para a taxa selic
axis(side = 4, at = pretty(range(TabelaAgregados$SELIC)))
mtext("Taxa Selic (%)", side = 4, line = 3)
# criando diferentes ggplots para depois comnbiná-los com o patchwork
options(scipen = 0)
#Criando uma gráfico plot com M1
plot(TabelaAgregados$Data, TabelaAgregados$M1, type = "l",
col = "green", ylim = c(min(TabelaAgregados$M1),
max(TabelaAgregados$M1)),
ylab = "M1", xlab = "Data")
#sobrepondo esse gráfico com outro plot para a taxa selic
par(new = TRUE)
plot(TabelaAgregados$Data, TabelaAgregados$SELIC, type = "l",
col = "cyan", axes = FALSE, xlab = "", ylab = "",
ylim = c(min(TabelaAgregados$SELIC),
max(TabelaAgregados$SELIC)))
#Criando um segundo eixo y para a taxa selic
axis(side = 4, at = pretty(range(TabelaAgregados$SELIC)))
mtext("Taxa Selic (%)", side = 4, line = 3)patc
View(TabelaAgregados)
sapply(TabelaAgregados, class)
# criando diferentes ggplots para depois comnbiná-los com o patchwork
options(scipen = 0)
#Criando uma gráfico plot com M1
plot(TabelaAgregados$Data, TabelaAgregados$M1, type = "l",
col = "green", ylim = c(min(TabelaAgregados$M1),
max(TabelaAgregados$M1)),
ylab = "M1", xlab = "Data")
#sobrepondo esse gráfico com outro plot para a taxa selic
par(new = TRUE)
plot(TabelaAgregados$Data, TabelaAgregados$SELIC, type = "l",
col = "cyan", axes = FALSE, xlab = "", ylab = "",
ylim = c(min(TabelaAgregados$SELIC),
max(TabelaAgregados$SELIC)))
#Criando um segundo eixo y para a taxa selic
axis(side = 4, at = pretty(range(TabelaAgregados$SELIC)))
mtext("Taxa Selic (%)", side = 4, line = 3)
# criando multiplos ggplots
# Formatando os próximos plots para saírem embutidos:
par(mfrow = c(2, 2))
#Criando uma gráfico plot com M1 e SELIC
plot(TabelaAgregados$Data, TabelaAgregados$M1, type = "l",
col = "green", ylim = c(min(TabelaAgregados$M1),
max(TabelaAgregados$M1)),
ylab = "M1", xlab = "Data")
#sobrepondo esse gráfico com outro plot para a taxa selic
par(new = TRUE)
plot(TabelaAgregados$Data, TabelaAgregados$SELIC, type = "l",
col = "cyan", axes = FALSE, xlab = "", ylab = "",
ylim = c(min(TabelaAgregados$SELIC),
max(TabelaAgregados$SELIC)))
#Criando um segundo eixo y para a taxa selic
axis(side = 4, at = pretty(range(TabelaAgregados$SELIC)))
mtext("Taxa Selic (%)", side = 4, line = 3)
### Fazendo o mesmo para M2 e SELIC
plot(TabelaAgregados$Data, TabelaAgregados$M2, type = "l",
col = "lawngreen", ylim = c(min(TabelaAgregados$M2),
max(TabelaAgregados$m2)),
ylab = "M1", xlab = "Data")
# criando multiplos ggplots
# Formatando os próximos plots para saírem embutidos:
par(mfrow = c(2, 2))
#Criando uma gráfico plot com M1 e SELIC
plot(TabelaAgregados$Data, TabelaAgregados$M1, type = "l",
col = "green", ylim = c(min(TabelaAgregados$M1),
max(TabelaAgregados$M1)),
ylab = "M1", xlab = "Data")
#sobrepondo esse gráfico com outro plot para a taxa selic
par(new = TRUE)
plot(TabelaAgregados$Data, TabelaAgregados$SELIC, type = "l",
col = "cyan", axes = FALSE, xlab = "", ylab = "",
ylim = c(min(TabelaAgregados$SELIC),
max(TabelaAgregados$SELIC)))
#Criando um segundo eixo y para a taxa selic
axis(side = 4, at = pretty(range(TabelaAgregados$SELIC)))
mtext("Taxa Selic (%)", side = 4, line = 3)
### Fazendo o mesmo para M2 e SELIC
plot(TabelaAgregados$Data, TabelaAgregados$M2, type = "l",
col = "lawngreen", ylim = c(min(TabelaAgregados$M2),
max(TabelaAgregados$M2)),
ylab = "M1", xlab = "Data")
par(new = TRUE)
plot(TabelaAgregados$Data, TabelaAgregados$SELIC, type = "l",
col = "cyan", axes = FALSE, xlab = "", ylab = "",
ylim = c(min(TabelaAgregados$SELIC),
max(TabelaAgregados$SELIC)))
axis(side =  4, at = pretty(range(TabelaAgregados$SELIC)))
mtext("Taxa Selic (%)", side = 4, line = 3)
# Fazendo o mesmo para M3 e SELIC
plot(TabelaAgregados$Data, TabelaAgregados$M3, type = "l",
col = "yellow", ylim = c(min(TabelaAgregados$M3),
max(TabelaAgregados$M3)),
ylab = "M3", xlab = "Data")
par(new = TRUE)
plot(TabelaAgregados$Data, TabelaAgregados$SELIC, type = "l",
col = "cyan", axes = FALSE, xlab = "", ylab = "",
ylim = c(min(TabelaAgregados$SELIC),
max(TabelaAgregados$SELIC)))
axis(side =  4, at = pretty(range(TabelaAgregados$SELIC)))
mtext("Taxa Selic (%)", side = 4, line = 3)
# Fazendo o mesmo para M4 e SELIC
plot(TabelaAgregados$Data, TabelaAgregados$M4, type = "l",
col = "orange", ylim = c(min(TabelaAgregados$M4),
max(TabelaAgregados$M4)),
ylab = "M4", xlab = "Data")
par(new = TRUE)
plot(TabelaAgregados$Data, TabelaAgregados$SELIC, type = "l",
col = "cyan", axes = FALSE, xlab = "", ylab = "",
ylim = c(min(TabelaAgregados$SELIC),
max(TabelaAgregados$SELIC)))
axis(side =  4, at = pretty(range(TabelaAgregados$SELIC)))
mtext("Taxa Selic (%)", side = 4, line = 3)
par(mfrow = c(1,1))
knitr::opts_chunk$set(fig.width=6, fig.height=4, out.width='100%')
# criando multiplos ggplots
# Formatando os próximos plots para saírem embutidos:
par(mfrow = c(2, 2))
#Criando uma gráfico plot com M1 e SELIC
plot(TabelaAgregados$Data, TabelaAgregados$M1, type = "l",
col = "green", ylim = c(min(TabelaAgregados$M1),
max(TabelaAgregados$M1)),
ylab = "M1", xlab = "Data")
#sobrepondo esse gráfico com outro plot para a taxa selic
par(new = TRUE)
plot(TabelaAgregados$Data, TabelaAgregados$SELIC, type = "l",
col = "cyan", axes = FALSE, xlab = "", ylab = "",
ylim = c(min(TabelaAgregados$SELIC),
max(TabelaAgregados$SELIC)))
#Criando um segundo eixo y para a taxa selic
axis(side = 4, at = pretty(range(TabelaAgregados$SELIC)))
mtext("Taxa Selic (%)", side = 4, line = 3)
### Fazendo o mesmo para M2 e SELIC
plot(TabelaAgregados$Data, TabelaAgregados$M2, type = "l",
col = "lawngreen", ylim = c(min(TabelaAgregados$M2),
max(TabelaAgregados$M2)),
ylab = "M1", xlab = "Data")
par(new = TRUE)
plot(TabelaAgregados$Data, TabelaAgregados$SELIC, type = "l",
col = "cyan", axes = FALSE, xlab = "", ylab = "",
ylim = c(min(TabelaAgregados$SELIC),
max(TabelaAgregados$SELIC)))
axis(side =  4, at = pretty(range(TabelaAgregados$SELIC)))
mtext("Taxa Selic (%)", side = 4, line = 3)
# Fazendo o mesmo para M3 e SELIC
plot(TabelaAgregados$Data, TabelaAgregados$M3, type = "l",
col = "yellow", ylim = c(min(TabelaAgregados$M3),
max(TabelaAgregados$M3)),
ylab = "M3", xlab = "Data")
par(new = TRUE)
plot(TabelaAgregados$Data, TabelaAgregados$SELIC, type = "l",
col = "cyan", axes = FALSE, xlab = "", ylab = "",
ylim = c(min(TabelaAgregados$SELIC),
max(TabelaAgregados$SELIC)))
axis(side =  4, at = pretty(range(TabelaAgregados$SELIC)))
mtext("Taxa Selic (%)", side = 4, line = 3)
# Fazendo o mesmo para M4 e SELIC
plot(TabelaAgregados$Data, TabelaAgregados$M4, type = "l",
col = "orange", ylim = c(min(TabelaAgregados$M4),
max(TabelaAgregados$M4)),
ylab = "M4", xlab = "Data")
par(new = TRUE)
plot(TabelaAgregados$Data, TabelaAgregados$SELIC, type = "l",
col = "cyan", axes = FALSE, xlab = "", ylab = "",
ylim = c(min(TabelaAgregados$SELIC),
max(TabelaAgregados$SELIC)))
axis(side =  4, at = pretty(range(TabelaAgregados$SELIC)))
mtext("Taxa Selic (%)", side = 4, line = 3)
par(mfrow = c(1,1))
